def @main(%input: Tensor[(1, 96, 96, 1), int8] /* ty=Tensor[(1, 96, 96, 1), int8] span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_prequant__174.input:0:0 */) -> Tensor[(1, 2), int8] {
  %0 = reshape(%input, newshape=[1, 1, 96, 96]) /* ty=Tensor[(1, 1, 96, 96), int8] span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_prequant__174:0:0 */;
  %1 = qnn.dequantize(%0, 0.00784314f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_prequant__174_DequantizeLinear__485.scale__60:0:0 */, -1 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_prequant__174_DequantizeLinear__485:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 1, 96, 96), float32] span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_prequant__174_DequantizeLinear__485:0:0 */;
  %2 = qnn.dequantize(meta[relay.Constant][0] /* ty=Tensor[(8, 1, 3, 3), int8] span=MobilenetV1/Conv2d_0/weights/read_dequant.MobilenetV1/Conv2d_0/weights/read:0:0 */, meta[relay.Constant][1] /* ty=Tensor[(8), float32] span=MobilenetV1/Conv2d_0/weights/read_dequant.scale__172:0:0 */, meta[relay.Constant][2] /* ty=Tensor[(8), int32] span=MobilenetV1/Conv2d_0/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(8, 1, 3, 3), float32] span=MobilenetV1/Conv2d_0/weights/read_dequant:0:0 */;
  %3 = qnn.dequantize(meta[relay.Constant][3] /* ty=Tensor[(8), int32] span=MobilenetV1/MobilenetV1/Conv2d_0/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_0/Conv2D_bias:0:0 */, meta[relay.Constant][4] /* ty=Tensor[(8), float32] span=MobilenetV1/MobilenetV1/Conv2d_0/Conv2D_bias_dequant.scale__114:0:0 */, meta[relay.Constant][5] /* ty=Tensor[(8), int32] span=MobilenetV1/MobilenetV1/Conv2d_0/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(8), float32] span=MobilenetV1/MobilenetV1/Conv2d_0/Conv2D_bias_dequant:0:0 */;
  %4 = expand_dims(%3, axis=1, num_newaxis=2) /* ty=Tensor[(8, 1, 1), float32] */;
  %5 = nn.conv2d(%1, %2, strides=[2, 2], padding=[0, 0, 1, 1], channels=8, kernel_size=[3, 3]) /* ty=Tensor[(1, 8, 48, 48), float32] span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_prequant:0:0 */;
  %6 = expand_dims(%4, axis=0) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %7 = add(%5, %6) /* ty=Tensor[(1, 8, 48, 48), float32] */;
  %8 = clip(%7, a_min=0f, a_max=6f) /* ty=Tensor[(1, 8, 48, 48), float32] span=Relu6__5:0:0 */;
  %9 = qnn.quantize(%8, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 8, 48, 48), int8] span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize:0:0 */;
  %10 = qnn.dequantize(%9, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_1_depthwise/Relu6_prequant__185_DequantizeLinear__517:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 8, 48, 48), float32] span=MobilenetV1/MobilenetV1/Conv2d_1_depthwise/Relu6_prequant__185_DequantizeLinear__517:0:0 */;
  %11 = qnn.dequantize(meta[relay.Constant][6] /* ty=Tensor[(8, 1, 3, 3), int8] span=MobilenetV1/Conv2d_1_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_1_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][7] /* ty=Tensor[(8), float32] span=MobilenetV1/Conv2d_1_depthwise/depthwise_weights/read_dequant.scale__154:0:0 */, meta[relay.Constant][8] /* ty=Tensor[(8), int32] span=MobilenetV1/Conv2d_1_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(8, 1, 3, 3), float32] span=MobilenetV1/Conv2d_1_depthwise/depthwise_weights/read_dequant:0:0 */;
  %12 = qnn.dequantize(meta[relay.Constant][9] /* ty=Tensor[(8), int32] span=MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][10] /* ty=Tensor[(8), float32] span=MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise_bias_dequant.scale__96:0:0 */, meta[relay.Constant][11] /* ty=Tensor[(8), int32] span=MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(8), float32] span=MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise_bias_dequant:0:0 */;
  %13 = expand_dims(%12, axis=1, num_newaxis=2) /* ty=Tensor[(8, 1, 1), float32] */;
  %14 = nn.conv2d(%10, %11, padding=[1, 1, 1, 1], groups=8, channels=8, kernel_size=[3, 3]) /* ty=Tensor[(1, 8, 48, 48), float32] span=MobilenetV1/MobilenetV1/Conv2d_1_depthwise/Relu6_prequant:0:0 */;
  %15 = expand_dims(%13, axis=0) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 8, 48, 48), float32] */;
  %17 = clip(%16, a_min=0f, a_max=6f) /* ty=Tensor[(1, 8, 48, 48), float32] span=Relu6__7:0:0 */;
  %18 = qnn.quantize(%17, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_1_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 8, 48, 48), int8] span=MobilenetV1/MobilenetV1/Conv2d_1_depthwise/Relu6_quantize:0:0 */;
  %19 = qnn.dequantize(%18, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Relu6_prequant__196_DequantizeLinear__529:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 8, 48, 48), float32] span=MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Relu6_prequant__196_DequantizeLinear__529:0:0 */;
  %20 = qnn.dequantize(meta[relay.Constant][12] /* ty=Tensor[(16, 8, 1, 1), int8] span=MobilenetV1/Conv2d_1_pointwise/weights/read_dequant.MobilenetV1/Conv2d_1_pointwise/weights/read:0:0 */, meta[relay.Constant][13] /* ty=Tensor[(16), float32] span=MobilenetV1/Conv2d_1_pointwise/weights/read_dequant.scale__152:0:0 */, meta[relay.Constant][14] /* ty=Tensor[(16), int32] span=MobilenetV1/Conv2d_1_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16, 8, 1, 1), float32] span=MobilenetV1/Conv2d_1_pointwise/weights/read_dequant:0:0 */;
  %21 = qnn.dequantize(meta[relay.Constant][15] /* ty=Tensor[(16), int32] span=MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][16] /* ty=Tensor[(16), float32] span=MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Conv2D_bias_dequant.scale__94:0:0 */, meta[relay.Constant][17] /* ty=Tensor[(16), int32] span=MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16), float32] span=MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Conv2D_bias_dequant:0:0 */;
  %22 = expand_dims(%21, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %23 = nn.conv2d(%19, %20, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 48, 48), float32] span=MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Relu6_prequant:0:0 */;
  %24 = expand_dims(%22, axis=0) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %25 = add(%23, %24) /* ty=Tensor[(1, 16, 48, 48), float32] */;
  %26 = clip(%25, a_min=0f, a_max=6f) /* ty=Tensor[(1, 16, 48, 48), float32] span=Relu6__9:0:0 */;
  %27 = qnn.quantize(%26, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 16, 48, 48), int8] span=MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Relu6_quantize:0:0 */;
  %28 = qnn.dequantize(%27, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6_prequant__205_DequantizeLinear__527:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 16, 48, 48), float32] span=MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6_prequant__205_DequantizeLinear__527:0:0 */;
  %29 = qnn.dequantize(meta[relay.Constant][18] /* ty=Tensor[(16, 1, 3, 3), int8] span=MobilenetV1/Conv2d_2_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_2_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][19] /* ty=Tensor[(16), float32] span=MobilenetV1/Conv2d_2_depthwise/depthwise_weights/read_dequant.scale__150:0:0 */, meta[relay.Constant][20] /* ty=Tensor[(16), int32] span=MobilenetV1/Conv2d_2_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16, 1, 3, 3), float32] span=MobilenetV1/Conv2d_2_depthwise/depthwise_weights/read_dequant:0:0 */;
  %30 = qnn.dequantize(meta[relay.Constant][21] /* ty=Tensor[(16), int32] span=MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][22] /* ty=Tensor[(16), float32] span=MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise_bias_dequant.scale__92:0:0 */, meta[relay.Constant][23] /* ty=Tensor[(16), int32] span=MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16), float32] span=MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise_bias_dequant:0:0 */;
  %31 = expand_dims(%30, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %32 = nn.conv2d(%28, %29, strides=[2, 2], padding=[0, 0, 1, 1], groups=16, channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 24, 24), float32] span=MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6_prequant:0:0 */;
  %33 = expand_dims(%31, axis=0) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %34 = add(%32, %33) /* ty=Tensor[(1, 16, 24, 24), float32] */;
  %35 = clip(%34, a_min=0f, a_max=6f) /* ty=Tensor[(1, 16, 24, 24), float32] span=Relu6__11:0:0 */;
  %36 = qnn.quantize(%35, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 16, 24, 24), int8] span=MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6_quantize:0:0 */;
  %37 = qnn.dequantize(%36, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Relu6_prequant__216_DequantizeLinear__533:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 16, 24, 24), float32] span=MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Relu6_prequant__216_DequantizeLinear__533:0:0 */;
  %38 = qnn.dequantize(meta[relay.Constant][24] /* ty=Tensor[(32, 16, 1, 1), int8] span=MobilenetV1/Conv2d_2_pointwise/weights/read_dequant.MobilenetV1/Conv2d_2_pointwise/weights/read:0:0 */, meta[relay.Constant][25] /* ty=Tensor[(32), float32] span=MobilenetV1/Conv2d_2_pointwise/weights/read_dequant.scale__148:0:0 */, meta[relay.Constant][26] /* ty=Tensor[(32), int32] span=MobilenetV1/Conv2d_2_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32, 16, 1, 1), float32] span=MobilenetV1/Conv2d_2_pointwise/weights/read_dequant:0:0 */;
  %39 = qnn.dequantize(meta[relay.Constant][27] /* ty=Tensor[(32), int32] span=MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][28] /* ty=Tensor[(32), float32] span=MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Conv2D_bias_dequant.scale__90:0:0 */, meta[relay.Constant][29] /* ty=Tensor[(32), int32] span=MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32), float32] span=MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Conv2D_bias_dequant:0:0 */;
  %40 = expand_dims(%39, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %41 = nn.conv2d(%37, %38, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 24, 24), float32] span=MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Relu6_prequant:0:0 */;
  %42 = expand_dims(%40, axis=0) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %43 = add(%41, %42) /* ty=Tensor[(1, 32, 24, 24), float32] */;
  %44 = clip(%43, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 24, 24), float32] span=Relu6__13:0:0 */;
  %45 = qnn.quantize(%44, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 32, 24, 24), int8] span=MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Relu6_quantize:0:0 */;
  %46 = qnn.dequantize(%45, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_3_depthwise/Relu6_prequant__225_DequantizeLinear__523:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 32, 24, 24), float32] span=MobilenetV1/MobilenetV1/Conv2d_3_depthwise/Relu6_prequant__225_DequantizeLinear__523:0:0 */;
  %47 = qnn.dequantize(meta[relay.Constant][30] /* ty=Tensor[(32, 1, 3, 3), int8] span=MobilenetV1/Conv2d_3_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_3_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][31] /* ty=Tensor[(32), float32] span=MobilenetV1/Conv2d_3_depthwise/depthwise_weights/read_dequant.scale__146:0:0 */, meta[relay.Constant][32] /* ty=Tensor[(32), int32] span=MobilenetV1/Conv2d_3_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32, 1, 3, 3), float32] span=MobilenetV1/Conv2d_3_depthwise/depthwise_weights/read_dequant:0:0 */;
  %48 = qnn.dequantize(meta[relay.Constant][33] /* ty=Tensor[(32), int32] span=MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][34] /* ty=Tensor[(32), float32] span=MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise_bias_dequant.scale__88:0:0 */, meta[relay.Constant][35] /* ty=Tensor[(32), int32] span=MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32), float32] span=MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise_bias_dequant:0:0 */;
  %49 = expand_dims(%48, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %50 = nn.conv2d(%46, %47, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 24, 24), float32] span=MobilenetV1/MobilenetV1/Conv2d_3_depthwise/Relu6_prequant:0:0 */;
  %51 = expand_dims(%49, axis=0) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %52 = add(%50, %51) /* ty=Tensor[(1, 32, 24, 24), float32] */;
  %53 = clip(%52, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 24, 24), float32] span=Relu6__15:0:0 */;
  %54 = qnn.quantize(%53, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_3_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 32, 24, 24), int8] span=MobilenetV1/MobilenetV1/Conv2d_3_depthwise/Relu6_quantize:0:0 */;
  %55 = qnn.dequantize(%54, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Relu6_prequant__236_DequantizeLinear__530:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 32, 24, 24), float32] span=MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Relu6_prequant__236_DequantizeLinear__530:0:0 */;
  %56 = qnn.dequantize(meta[relay.Constant][36] /* ty=Tensor[(32, 32, 1, 1), int8] span=MobilenetV1/Conv2d_3_pointwise/weights/read_dequant.MobilenetV1/Conv2d_3_pointwise/weights/read:0:0 */, meta[relay.Constant][37] /* ty=Tensor[(32), float32] span=MobilenetV1/Conv2d_3_pointwise/weights/read_dequant.scale__144:0:0 */, meta[relay.Constant][38] /* ty=Tensor[(32), int32] span=MobilenetV1/Conv2d_3_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32, 32, 1, 1), float32] span=MobilenetV1/Conv2d_3_pointwise/weights/read_dequant:0:0 */;
  %57 = qnn.dequantize(meta[relay.Constant][39] /* ty=Tensor[(32), int32] span=MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][40] /* ty=Tensor[(32), float32] span=MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Conv2D_bias_dequant.scale__86:0:0 */, meta[relay.Constant][41] /* ty=Tensor[(32), int32] span=MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32), float32] span=MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Conv2D_bias_dequant:0:0 */;
  %58 = expand_dims(%57, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %59 = nn.conv2d(%55, %56, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 24, 24), float32] span=MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Relu6_prequant:0:0 */;
  %60 = expand_dims(%58, axis=0) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %61 = add(%59, %60) /* ty=Tensor[(1, 32, 24, 24), float32] */;
  %62 = clip(%61, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 24, 24), float32] span=Relu6__17:0:0 */;
  %63 = qnn.quantize(%62, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 32, 24, 24), int8] span=MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Relu6_quantize:0:0 */;
  %64 = qnn.dequantize(%63, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_4_depthwise/Relu6_prequant__245_DequantizeLinear__537:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 32, 24, 24), float32] span=MobilenetV1/MobilenetV1/Conv2d_4_depthwise/Relu6_prequant__245_DequantizeLinear__537:0:0 */;
  %65 = qnn.dequantize(meta[relay.Constant][42] /* ty=Tensor[(32, 1, 3, 3), int8] span=MobilenetV1/Conv2d_4_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_4_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][43] /* ty=Tensor[(32), float32] span=MobilenetV1/Conv2d_4_depthwise/depthwise_weights/read_dequant.scale__142:0:0 */, meta[relay.Constant][44] /* ty=Tensor[(32), int32] span=MobilenetV1/Conv2d_4_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32, 1, 3, 3), float32] span=MobilenetV1/Conv2d_4_depthwise/depthwise_weights/read_dequant:0:0 */;
  %66 = qnn.dequantize(meta[relay.Constant][45] /* ty=Tensor[(32), int32] span=MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][46] /* ty=Tensor[(32), float32] span=MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise_bias_dequant.scale__84:0:0 */, meta[relay.Constant][47] /* ty=Tensor[(32), int32] span=MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32), float32] span=MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise_bias_dequant:0:0 */;
  %67 = expand_dims(%66, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %68 = nn.conv2d(%64, %65, strides=[2, 2], padding=[0, 0, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 12, 12), float32] span=MobilenetV1/MobilenetV1/Conv2d_4_depthwise/Relu6_prequant:0:0 */;
  %69 = expand_dims(%67, axis=0) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %70 = add(%68, %69) /* ty=Tensor[(1, 32, 12, 12), float32] */;
  %71 = clip(%70, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 12, 12), float32] span=Relu6__19:0:0 */;
  %72 = qnn.quantize(%71, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_4_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 32, 12, 12), int8] span=MobilenetV1/MobilenetV1/Conv2d_4_depthwise/Relu6_quantize:0:0 */;
  %73 = qnn.dequantize(%72, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Relu6_prequant__256_DequantizeLinear__515:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 32, 12, 12), float32] span=MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Relu6_prequant__256_DequantizeLinear__515:0:0 */;
  %74 = qnn.dequantize(meta[relay.Constant][48] /* ty=Tensor[(64, 32, 1, 1), int8] span=MobilenetV1/Conv2d_4_pointwise/weights/read_dequant.MobilenetV1/Conv2d_4_pointwise/weights/read:0:0 */, meta[relay.Constant][49] /* ty=Tensor[(64), float32] span=MobilenetV1/Conv2d_4_pointwise/weights/read_dequant.scale__140:0:0 */, meta[relay.Constant][50] /* ty=Tensor[(64), int32] span=MobilenetV1/Conv2d_4_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(64, 32, 1, 1), float32] span=MobilenetV1/Conv2d_4_pointwise/weights/read_dequant:0:0 */;
  %75 = qnn.dequantize(meta[relay.Constant][51] /* ty=Tensor[(64), int32] span=MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][52] /* ty=Tensor[(64), float32] span=MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Conv2D_bias_dequant.scale__82:0:0 */, meta[relay.Constant][53] /* ty=Tensor[(64), int32] span=MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(64), float32] span=MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Conv2D_bias_dequant:0:0 */;
  %76 = expand_dims(%75, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %77 = nn.conv2d(%73, %74, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 12, 12), float32] span=MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Relu6_prequant:0:0 */;
  %78 = expand_dims(%76, axis=0) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %79 = add(%77, %78) /* ty=Tensor[(1, 64, 12, 12), float32] */;
  %80 = clip(%79, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 12, 12), float32] span=Relu6__21:0:0 */;
  %81 = qnn.quantize(%80, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 64, 12, 12), int8] span=MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Relu6_quantize:0:0 */;
  %82 = qnn.dequantize(%81, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_5_depthwise/Relu6_prequant__265_DequantizeLinear__519:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 64, 12, 12), float32] span=MobilenetV1/MobilenetV1/Conv2d_5_depthwise/Relu6_prequant__265_DequantizeLinear__519:0:0 */;
  %83 = qnn.dequantize(meta[relay.Constant][54] /* ty=Tensor[(64, 1, 3, 3), int8] span=MobilenetV1/Conv2d_5_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_5_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][55] /* ty=Tensor[(64), float32] span=MobilenetV1/Conv2d_5_depthwise/depthwise_weights/read_dequant.scale__138:0:0 */, meta[relay.Constant][56] /* ty=Tensor[(64), int32] span=MobilenetV1/Conv2d_5_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(64, 1, 3, 3), float32] span=MobilenetV1/Conv2d_5_depthwise/depthwise_weights/read_dequant:0:0 */;
  %84 = qnn.dequantize(meta[relay.Constant][57] /* ty=Tensor[(64), int32] span=MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][58] /* ty=Tensor[(64), float32] span=MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise_bias_dequant.scale__80:0:0 */, meta[relay.Constant][59] /* ty=Tensor[(64), int32] span=MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(64), float32] span=MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise_bias_dequant:0:0 */;
  %85 = expand_dims(%84, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %86 = nn.conv2d(%82, %83, padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 12, 12), float32] span=MobilenetV1/MobilenetV1/Conv2d_5_depthwise/Relu6_prequant:0:0 */;
  %87 = expand_dims(%85, axis=0) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %88 = add(%86, %87) /* ty=Tensor[(1, 64, 12, 12), float32] */;
  %89 = clip(%88, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 12, 12), float32] span=Relu6__23:0:0 */;
  %90 = qnn.quantize(%89, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_5_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 64, 12, 12), int8] span=MobilenetV1/MobilenetV1/Conv2d_5_depthwise/Relu6_quantize:0:0 */;
  %91 = qnn.dequantize(%90, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6_prequant__276_DequantizeLinear__522:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 64, 12, 12), float32] span=MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6_prequant__276_DequantizeLinear__522:0:0 */;
  %92 = qnn.dequantize(meta[relay.Constant][60] /* ty=Tensor[(64, 64, 1, 1), int8] span=MobilenetV1/Conv2d_5_pointwise/weights/read_dequant.MobilenetV1/Conv2d_5_pointwise/weights/read:0:0 */, meta[relay.Constant][61] /* ty=Tensor[(64), float32] span=MobilenetV1/Conv2d_5_pointwise/weights/read_dequant.scale__136:0:0 */, meta[relay.Constant][62] /* ty=Tensor[(64), int32] span=MobilenetV1/Conv2d_5_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(64, 64, 1, 1), float32] span=MobilenetV1/Conv2d_5_pointwise/weights/read_dequant:0:0 */;
  %93 = qnn.dequantize(meta[relay.Constant][63] /* ty=Tensor[(64), int32] span=MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][64] /* ty=Tensor[(64), float32] span=MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Conv2D_bias_dequant.scale__78:0:0 */, meta[relay.Constant][65] /* ty=Tensor[(64), int32] span=MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(64), float32] span=MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Conv2D_bias_dequant:0:0 */;
  %94 = expand_dims(%93, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %95 = nn.conv2d(%91, %92, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 12, 12), float32] span=MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6_prequant:0:0 */;
  %96 = expand_dims(%94, axis=0) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %97 = add(%95, %96) /* ty=Tensor[(1, 64, 12, 12), float32] */;
  %98 = clip(%97, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 12, 12), float32] span=Relu6__25:0:0 */;
  %99 = qnn.quantize(%98, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 64, 12, 12), int8] span=MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6_quantize:0:0 */;
  %100 = qnn.dequantize(%99, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_6_depthwise/Relu6_prequant__285_DequantizeLinear__518:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 64, 12, 12), float32] span=MobilenetV1/MobilenetV1/Conv2d_6_depthwise/Relu6_prequant__285_DequantizeLinear__518:0:0 */;
  %101 = qnn.dequantize(meta[relay.Constant][66] /* ty=Tensor[(64, 1, 3, 3), int8] span=MobilenetV1/Conv2d_6_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_6_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][67] /* ty=Tensor[(64), float32] span=MobilenetV1/Conv2d_6_depthwise/depthwise_weights/read_dequant.scale__134:0:0 */, meta[relay.Constant][68] /* ty=Tensor[(64), int32] span=MobilenetV1/Conv2d_6_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(64, 1, 3, 3), float32] span=MobilenetV1/Conv2d_6_depthwise/depthwise_weights/read_dequant:0:0 */;
  %102 = qnn.dequantize(meta[relay.Constant][69] /* ty=Tensor[(64), int32] span=MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][70] /* ty=Tensor[(64), float32] span=MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise_bias_dequant.scale__76:0:0 */, meta[relay.Constant][71] /* ty=Tensor[(64), int32] span=MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(64), float32] span=MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise_bias_dequant:0:0 */;
  %103 = expand_dims(%102, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %104 = nn.conv2d(%100, %101, strides=[2, 2], padding=[0, 0, 1, 1], groups=64, channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_6_depthwise/Relu6_prequant:0:0 */;
  %105 = expand_dims(%103, axis=0) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %106 = add(%104, %105) /* ty=Tensor[(1, 64, 6, 6), float32] */;
  %107 = clip(%106, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 6, 6), float32] span=Relu6__27:0:0 */;
  %108 = qnn.quantize(%107, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_6_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 64, 6, 6), int8] span=MobilenetV1/MobilenetV1/Conv2d_6_depthwise/Relu6_quantize:0:0 */;
  %109 = qnn.dequantize(%108, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Relu6_prequant__296_DequantizeLinear__534:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 64, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Relu6_prequant__296_DequantizeLinear__534:0:0 */;
  %110 = qnn.dequantize(meta[relay.Constant][72] /* ty=Tensor[(128, 64, 1, 1), int8] span=MobilenetV1/Conv2d_6_pointwise/weights/read_dequant.MobilenetV1/Conv2d_6_pointwise/weights/read:0:0 */, meta[relay.Constant][73] /* ty=Tensor[(128), float32] span=MobilenetV1/Conv2d_6_pointwise/weights/read_dequant.scale__132:0:0 */, meta[relay.Constant][74] /* ty=Tensor[(128), int32] span=MobilenetV1/Conv2d_6_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128, 64, 1, 1), float32] span=MobilenetV1/Conv2d_6_pointwise/weights/read_dequant:0:0 */;
  %111 = qnn.dequantize(meta[relay.Constant][75] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][76] /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Conv2D_bias_dequant.scale__74:0:0 */, meta[relay.Constant][77] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Conv2D_bias_dequant:0:0 */;
  %112 = expand_dims(%111, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %113 = nn.conv2d(%109, %110, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Relu6_prequant:0:0 */;
  %114 = expand_dims(%112, axis=0) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %115 = add(%113, %114) /* ty=Tensor[(1, 128, 6, 6), float32] */;
  %116 = clip(%115, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 6, 6), float32] span=Relu6__29:0:0 */;
  %117 = qnn.quantize(%116, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 6, 6), int8] span=MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Relu6_quantize:0:0 */;
  %118 = qnn.dequantize(%117, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_7_depthwise/Relu6_prequant__305_DequantizeLinear__532:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_7_depthwise/Relu6_prequant__305_DequantizeLinear__532:0:0 */;
  %119 = qnn.dequantize(meta[relay.Constant][78] /* ty=Tensor[(128, 1, 3, 3), int8] span=MobilenetV1/Conv2d_7_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_7_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][79] /* ty=Tensor[(128), float32] span=MobilenetV1/Conv2d_7_depthwise/depthwise_weights/read_dequant.scale__130:0:0 */, meta[relay.Constant][80] /* ty=Tensor[(128), int32] span=MobilenetV1/Conv2d_7_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128, 1, 3, 3), float32] span=MobilenetV1/Conv2d_7_depthwise/depthwise_weights/read_dequant:0:0 */;
  %120 = qnn.dequantize(meta[relay.Constant][81] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][82] /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise_bias_dequant.scale__72:0:0 */, meta[relay.Constant][83] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise_bias_dequant:0:0 */;
  %121 = expand_dims(%120, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %122 = nn.conv2d(%118, %119, padding=[1, 1, 1, 1], groups=128, channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_7_depthwise/Relu6_prequant:0:0 */;
  %123 = expand_dims(%121, axis=0) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %124 = add(%122, %123) /* ty=Tensor[(1, 128, 6, 6), float32] */;
  %125 = clip(%124, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 6, 6), float32] span=Relu6__31:0:0 */;
  %126 = qnn.quantize(%125, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_7_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 6, 6), int8] span=MobilenetV1/MobilenetV1/Conv2d_7_depthwise/Relu6_quantize:0:0 */;
  %127 = qnn.dequantize(%126, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Relu6_prequant__316_DequantizeLinear__535:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Relu6_prequant__316_DequantizeLinear__535:0:0 */;
  %128 = qnn.dequantize(meta[relay.Constant][84] /* ty=Tensor[(128, 128, 1, 1), int8] span=MobilenetV1/Conv2d_7_pointwise/weights/read_dequant.MobilenetV1/Conv2d_7_pointwise/weights/read:0:0 */, meta[relay.Constant][85] /* ty=Tensor[(128), float32] span=MobilenetV1/Conv2d_7_pointwise/weights/read_dequant.scale__128:0:0 */, meta[relay.Constant][86] /* ty=Tensor[(128), int32] span=MobilenetV1/Conv2d_7_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128, 128, 1, 1), float32] span=MobilenetV1/Conv2d_7_pointwise/weights/read_dequant:0:0 */;
  %129 = qnn.dequantize(meta[relay.Constant][87] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][88] /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Conv2D_bias_dequant.scale__70:0:0 */, meta[relay.Constant][89] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Conv2D_bias_dequant:0:0 */;
  %130 = expand_dims(%129, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %131 = nn.conv2d(%127, %128, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Relu6_prequant:0:0 */;
  %132 = expand_dims(%130, axis=0) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %133 = add(%131, %132) /* ty=Tensor[(1, 128, 6, 6), float32] */;
  %134 = clip(%133, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 6, 6), float32] span=Relu6__33:0:0 */;
  %135 = qnn.quantize(%134, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 6, 6), int8] span=MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Relu6_quantize:0:0 */;
  %136 = qnn.dequantize(%135, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_8_depthwise/Relu6_prequant__325_DequantizeLinear__516:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_8_depthwise/Relu6_prequant__325_DequantizeLinear__516:0:0 */;
  %137 = qnn.dequantize(meta[relay.Constant][90] /* ty=Tensor[(128, 1, 3, 3), int8] span=MobilenetV1/Conv2d_8_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_8_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][91] /* ty=Tensor[(128), float32] span=MobilenetV1/Conv2d_8_depthwise/depthwise_weights/read_dequant.scale__126:0:0 */, meta[relay.Constant][92] /* ty=Tensor[(128), int32] span=MobilenetV1/Conv2d_8_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128, 1, 3, 3), float32] span=MobilenetV1/Conv2d_8_depthwise/depthwise_weights/read_dequant:0:0 */;
  %138 = qnn.dequantize(meta[relay.Constant][93] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][94] /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise_bias_dequant.scale__68:0:0 */, meta[relay.Constant][95] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise_bias_dequant:0:0 */;
  %139 = expand_dims(%138, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %140 = nn.conv2d(%136, %137, padding=[1, 1, 1, 1], groups=128, channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_8_depthwise/Relu6_prequant:0:0 */;
  %141 = expand_dims(%139, axis=0) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %142 = add(%140, %141) /* ty=Tensor[(1, 128, 6, 6), float32] */;
  %143 = clip(%142, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 6, 6), float32] span=Relu6__35:0:0 */;
  %144 = qnn.quantize(%143, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_8_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 6, 6), int8] span=MobilenetV1/MobilenetV1/Conv2d_8_depthwise/Relu6_quantize:0:0 */;
  %145 = qnn.dequantize(%144, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Relu6_prequant__336_DequantizeLinear__540:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Relu6_prequant__336_DequantizeLinear__540:0:0 */;
  %146 = qnn.dequantize(meta[relay.Constant][96] /* ty=Tensor[(128, 128, 1, 1), int8] span=MobilenetV1/Conv2d_8_pointwise/weights/read_dequant.MobilenetV1/Conv2d_8_pointwise/weights/read:0:0 */, meta[relay.Constant][97] /* ty=Tensor[(128), float32] span=MobilenetV1/Conv2d_8_pointwise/weights/read_dequant.scale__124:0:0 */, meta[relay.Constant][98] /* ty=Tensor[(128), int32] span=MobilenetV1/Conv2d_8_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128, 128, 1, 1), float32] span=MobilenetV1/Conv2d_8_pointwise/weights/read_dequant:0:0 */;
  %147 = qnn.dequantize(meta[relay.Constant][99] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][100] /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Conv2D_bias_dequant.scale__66:0:0 */, meta[relay.Constant][101] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Conv2D_bias_dequant:0:0 */;
  %148 = expand_dims(%147, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %149 = nn.conv2d(%145, %146, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Relu6_prequant:0:0 */;
  %150 = expand_dims(%148, axis=0) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %151 = add(%149, %150) /* ty=Tensor[(1, 128, 6, 6), float32] */;
  %152 = clip(%151, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 6, 6), float32] span=Relu6__37:0:0 */;
  %153 = qnn.quantize(%152, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 6, 6), int8] span=MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Relu6_quantize:0:0 */;
  %154 = qnn.dequantize(%153, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_9_depthwise/Relu6_prequant__345_DequantizeLinear__539:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_9_depthwise/Relu6_prequant__345_DequantizeLinear__539:0:0 */;
  %155 = qnn.dequantize(meta[relay.Constant][102] /* ty=Tensor[(128, 1, 3, 3), int8] span=MobilenetV1/Conv2d_9_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_9_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][103] /* ty=Tensor[(128), float32] span=MobilenetV1/Conv2d_9_depthwise/depthwise_weights/read_dequant.scale__122:0:0 */, meta[relay.Constant][104] /* ty=Tensor[(128), int32] span=MobilenetV1/Conv2d_9_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128, 1, 3, 3), float32] span=MobilenetV1/Conv2d_9_depthwise/depthwise_weights/read_dequant:0:0 */;
  %156 = qnn.dequantize(meta[relay.Constant][105] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][106] /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise_bias_dequant.scale__64:0:0 */, meta[relay.Constant][107] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise_bias_dequant:0:0 */;
  %157 = expand_dims(%156, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %158 = nn.conv2d(%154, %155, padding=[1, 1, 1, 1], groups=128, channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_9_depthwise/Relu6_prequant:0:0 */;
  %159 = expand_dims(%157, axis=0) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %160 = add(%158, %159) /* ty=Tensor[(1, 128, 6, 6), float32] */;
  %161 = clip(%160, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 6, 6), float32] span=Relu6__39:0:0 */;
  %162 = qnn.quantize(%161, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_9_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 6, 6), int8] span=MobilenetV1/MobilenetV1/Conv2d_9_depthwise/Relu6_quantize:0:0 */;
  %163 = qnn.dequantize(%162, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Relu6_prequant__356_DequantizeLinear__524:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Relu6_prequant__356_DequantizeLinear__524:0:0 */;
  %164 = qnn.dequantize(meta[relay.Constant][108] /* ty=Tensor[(128, 128, 1, 1), int8] span=MobilenetV1/Conv2d_9_pointwise/weights/read_dequant.MobilenetV1/Conv2d_9_pointwise/weights/read:0:0 */, meta[relay.Constant][109] /* ty=Tensor[(128), float32] span=MobilenetV1/Conv2d_9_pointwise/weights/read_dequant.scale__120:0:0 */, meta[relay.Constant][110] /* ty=Tensor[(128), int32] span=MobilenetV1/Conv2d_9_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128, 128, 1, 1), float32] span=MobilenetV1/Conv2d_9_pointwise/weights/read_dequant:0:0 */;
  %165 = qnn.dequantize(meta[relay.Constant][111] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][112] /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Conv2D_bias_dequant.scale__62:0:0 */, meta[relay.Constant][113] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Conv2D_bias_dequant:0:0 */;
  %166 = expand_dims(%165, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %167 = nn.conv2d(%163, %164, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Relu6_prequant:0:0 */;
  %168 = expand_dims(%166, axis=0) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %169 = add(%167, %168) /* ty=Tensor[(1, 128, 6, 6), float32] */;
  %170 = clip(%169, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 6, 6), float32] span=Relu6__41:0:0 */;
  %171 = qnn.quantize(%170, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 6, 6), int8] span=MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Relu6_quantize:0:0 */;
  %172 = qnn.dequantize(%171, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_10_depthwise/Relu6_prequant__365_DequantizeLinear__531:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_10_depthwise/Relu6_prequant__365_DequantizeLinear__531:0:0 */;
  %173 = qnn.dequantize(meta[relay.Constant][114] /* ty=Tensor[(128, 1, 3, 3), int8] span=MobilenetV1/Conv2d_10_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_10_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][115] /* ty=Tensor[(128), float32] span=MobilenetV1/Conv2d_10_depthwise/depthwise_weights/read_dequant.scale__170:0:0 */, meta[relay.Constant][116] /* ty=Tensor[(128), int32] span=MobilenetV1/Conv2d_10_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128, 1, 3, 3), float32] span=MobilenetV1/Conv2d_10_depthwise/depthwise_weights/read_dequant:0:0 */;
  %174 = qnn.dequantize(meta[relay.Constant][117] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][118] /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise_bias_dequant.scale__112:0:0 */, meta[relay.Constant][119] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise_bias_dequant:0:0 */;
  %175 = expand_dims(%174, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %176 = nn.conv2d(%172, %173, padding=[1, 1, 1, 1], groups=128, channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_10_depthwise/Relu6_prequant:0:0 */;
  %177 = expand_dims(%175, axis=0) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %178 = add(%176, %177) /* ty=Tensor[(1, 128, 6, 6), float32] */;
  %179 = clip(%178, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 6, 6), float32] span=Relu6__43:0:0 */;
  %180 = qnn.quantize(%179, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_10_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 6, 6), int8] span=MobilenetV1/MobilenetV1/Conv2d_10_depthwise/Relu6_quantize:0:0 */;
  %181 = qnn.dequantize(%180, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Relu6_prequant__376_DequantizeLinear__514:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Relu6_prequant__376_DequantizeLinear__514:0:0 */;
  %182 = qnn.dequantize(meta[relay.Constant][120] /* ty=Tensor[(128, 128, 1, 1), int8] span=MobilenetV1/Conv2d_10_pointwise/weights/read_dequant.MobilenetV1/Conv2d_10_pointwise/weights/read:0:0 */, meta[relay.Constant][121] /* ty=Tensor[(128), float32] span=MobilenetV1/Conv2d_10_pointwise/weights/read_dequant.scale__168:0:0 */, meta[relay.Constant][122] /* ty=Tensor[(128), int32] span=MobilenetV1/Conv2d_10_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128, 128, 1, 1), float32] span=MobilenetV1/Conv2d_10_pointwise/weights/read_dequant:0:0 */;
  %183 = qnn.dequantize(meta[relay.Constant][123] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][124] /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Conv2D_bias_dequant.scale__110:0:0 */, meta[relay.Constant][125] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Conv2D_bias_dequant:0:0 */;
  %184 = expand_dims(%183, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %185 = nn.conv2d(%181, %182, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Relu6_prequant:0:0 */;
  %186 = expand_dims(%184, axis=0) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %187 = add(%185, %186) /* ty=Tensor[(1, 128, 6, 6), float32] */;
  %188 = clip(%187, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 6, 6), float32] span=Relu6__45:0:0 */;
  %189 = qnn.quantize(%188, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 6, 6), int8] span=MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Relu6_quantize:0:0 */;
  %190 = qnn.dequantize(%189, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_11_depthwise/Relu6_prequant__385_DequantizeLinear__526:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_11_depthwise/Relu6_prequant__385_DequantizeLinear__526:0:0 */;
  %191 = qnn.dequantize(meta[relay.Constant][126] /* ty=Tensor[(128, 1, 3, 3), int8] span=MobilenetV1/Conv2d_11_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_11_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][127] /* ty=Tensor[(128), float32] span=MobilenetV1/Conv2d_11_depthwise/depthwise_weights/read_dequant.scale__166:0:0 */, meta[relay.Constant][128] /* ty=Tensor[(128), int32] span=MobilenetV1/Conv2d_11_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128, 1, 3, 3), float32] span=MobilenetV1/Conv2d_11_depthwise/depthwise_weights/read_dequant:0:0 */;
  %192 = qnn.dequantize(meta[relay.Constant][129] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][130] /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise_bias_dequant.scale__108:0:0 */, meta[relay.Constant][131] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise_bias_dequant:0:0 */;
  %193 = expand_dims(%192, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %194 = nn.conv2d(%190, %191, padding=[1, 1, 1, 1], groups=128, channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_11_depthwise/Relu6_prequant:0:0 */;
  %195 = expand_dims(%193, axis=0) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %196 = add(%194, %195) /* ty=Tensor[(1, 128, 6, 6), float32] */;
  %197 = clip(%196, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 6, 6), float32] span=Relu6__47:0:0 */;
  %198 = qnn.quantize(%197, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_11_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 6, 6), int8] span=MobilenetV1/MobilenetV1/Conv2d_11_depthwise/Relu6_quantize:0:0 */;
  %199 = qnn.dequantize(%198, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6_prequant__396_DequantizeLinear__528:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6_prequant__396_DequantizeLinear__528:0:0 */;
  %200 = qnn.dequantize(meta[relay.Constant][132] /* ty=Tensor[(128, 128, 1, 1), int8] span=MobilenetV1/Conv2d_11_pointwise/weights/read_dequant.MobilenetV1/Conv2d_11_pointwise/weights/read:0:0 */, meta[relay.Constant][133] /* ty=Tensor[(128), float32] span=MobilenetV1/Conv2d_11_pointwise/weights/read_dequant.scale__164:0:0 */, meta[relay.Constant][134] /* ty=Tensor[(128), int32] span=MobilenetV1/Conv2d_11_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128, 128, 1, 1), float32] span=MobilenetV1/Conv2d_11_pointwise/weights/read_dequant:0:0 */;
  %201 = qnn.dequantize(meta[relay.Constant][135] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][136] /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Conv2D_bias_dequant.scale__106:0:0 */, meta[relay.Constant][137] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Conv2D_bias_dequant:0:0 */;
  %202 = expand_dims(%201, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %203 = nn.conv2d(%199, %200, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6_prequant:0:0 */;
  %204 = expand_dims(%202, axis=0) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %205 = add(%203, %204) /* ty=Tensor[(1, 128, 6, 6), float32] */;
  %206 = clip(%205, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 6, 6), float32] span=Relu6__49:0:0 */;
  %207 = qnn.quantize(%206, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 6, 6), int8] span=MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6_quantize:0:0 */;
  %208 = qnn.dequantize(%207, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_12_depthwise/Relu6_prequant__405_DequantizeLinear__521:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 128, 6, 6), float32] span=MobilenetV1/MobilenetV1/Conv2d_12_depthwise/Relu6_prequant__405_DequantizeLinear__521:0:0 */;
  %209 = qnn.dequantize(meta[relay.Constant][138] /* ty=Tensor[(128, 1, 3, 3), int8] span=MobilenetV1/Conv2d_12_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_12_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][139] /* ty=Tensor[(128), float32] span=MobilenetV1/Conv2d_12_depthwise/depthwise_weights/read_dequant.scale__162:0:0 */, meta[relay.Constant][140] /* ty=Tensor[(128), int32] span=MobilenetV1/Conv2d_12_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128, 1, 3, 3), float32] span=MobilenetV1/Conv2d_12_depthwise/depthwise_weights/read_dequant:0:0 */;
  %210 = qnn.dequantize(meta[relay.Constant][141] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][142] /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise_bias_dequant.scale__104:0:0 */, meta[relay.Constant][143] /* ty=Tensor[(128), int32] span=MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(128), float32] span=MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise_bias_dequant:0:0 */;
  %211 = expand_dims(%210, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %212 = nn.conv2d(%208, %209, strides=[2, 2], padding=[0, 0, 1, 1], groups=128, channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 3, 3), float32] span=MobilenetV1/MobilenetV1/Conv2d_12_depthwise/Relu6_prequant:0:0 */;
  %213 = expand_dims(%211, axis=0) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %214 = add(%212, %213) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %215 = clip(%214, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 3, 3), float32] span=Relu6__51:0:0 */;
  %216 = qnn.quantize(%215, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_12_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 128, 3, 3), int8] span=MobilenetV1/MobilenetV1/Conv2d_12_depthwise/Relu6_quantize:0:0 */;
  %217 = qnn.dequantize(%216, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Relu6_prequant__416_DequantizeLinear__541:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 128, 3, 3), float32] span=MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Relu6_prequant__416_DequantizeLinear__541:0:0 */;
  %218 = qnn.dequantize(meta[relay.Constant][144] /* ty=Tensor[(256, 128, 1, 1), int8] span=MobilenetV1/Conv2d_12_pointwise/weights/read_dequant.MobilenetV1/Conv2d_12_pointwise/weights/read:0:0 */, meta[relay.Constant][145] /* ty=Tensor[(256), float32] span=MobilenetV1/Conv2d_12_pointwise/weights/read_dequant.scale__160:0:0 */, meta[relay.Constant][146] /* ty=Tensor[(256), int32] span=MobilenetV1/Conv2d_12_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(256, 128, 1, 1), float32] span=MobilenetV1/Conv2d_12_pointwise/weights/read_dequant:0:0 */;
  %219 = qnn.dequantize(meta[relay.Constant][147] /* ty=Tensor[(256), int32] span=MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][148] /* ty=Tensor[(256), float32] span=MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Conv2D_bias_dequant.scale__102:0:0 */, meta[relay.Constant][149] /* ty=Tensor[(256), int32] span=MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(256), float32] span=MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Conv2D_bias_dequant:0:0 */;
  %220 = expand_dims(%219, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %221 = nn.conv2d(%217, %218, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 3, 3), float32] span=MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Relu6_prequant:0:0 */;
  %222 = expand_dims(%220, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %223 = add(%221, %222) /* ty=Tensor[(1, 256, 3, 3), float32] */;
  %224 = clip(%223, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 3, 3), float32] span=Relu6__53:0:0 */;
  %225 = qnn.quantize(%224, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 256, 3, 3), int8] span=MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Relu6_quantize:0:0 */;
  %226 = qnn.dequantize(%225, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_13_depthwise/Relu6_prequant__425_DequantizeLinear__520:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 256, 3, 3), float32] span=MobilenetV1/MobilenetV1/Conv2d_13_depthwise/Relu6_prequant__425_DequantizeLinear__520:0:0 */;
  %227 = qnn.dequantize(meta[relay.Constant][150] /* ty=Tensor[(256, 1, 3, 3), int8] span=MobilenetV1/Conv2d_13_depthwise/depthwise_weights/read_dequant.MobilenetV1/Conv2d_13_depthwise/depthwise_weights/read:0:0 */, meta[relay.Constant][151] /* ty=Tensor[(256), float32] span=MobilenetV1/Conv2d_13_depthwise/depthwise_weights/read_dequant.scale__158:0:0 */, meta[relay.Constant][152] /* ty=Tensor[(256), int32] span=MobilenetV1/Conv2d_13_depthwise/depthwise_weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(256, 1, 3, 3), float32] span=MobilenetV1/Conv2d_13_depthwise/depthwise_weights/read_dequant:0:0 */;
  %228 = qnn.dequantize(meta[relay.Constant][153] /* ty=Tensor[(256), int32] span=MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise_bias:0:0 */, meta[relay.Constant][154] /* ty=Tensor[(256), float32] span=MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise_bias_dequant.scale__100:0:0 */, meta[relay.Constant][155] /* ty=Tensor[(256), int32] span=MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(256), float32] span=MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise_bias_dequant:0:0 */;
  %229 = expand_dims(%228, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %230 = nn.conv2d(%226, %227, padding=[1, 1, 1, 1], groups=256, channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 3, 3), float32] span=MobilenetV1/MobilenetV1/Conv2d_13_depthwise/Relu6_prequant:0:0 */;
  %231 = expand_dims(%229, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %232 = add(%230, %231) /* ty=Tensor[(1, 256, 3, 3), float32] */;
  %233 = clip(%232, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 3, 3), float32] span=Relu6__55:0:0 */;
  %234 = qnn.quantize(%233, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_13_depthwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 256, 3, 3), int8] span=MobilenetV1/MobilenetV1/Conv2d_13_depthwise/Relu6_quantize:0:0 */;
  %235 = qnn.dequantize(%234, 0.0235294f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_0/Relu6_quantize.scale__272:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6_prequant__436_DequantizeLinear__538:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 256, 3, 3), float32] span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6_prequant__436_DequantizeLinear__538:0:0 */;
  %236 = qnn.dequantize(meta[relay.Constant][156] /* ty=Tensor[(256, 256, 1, 1), int8] span=MobilenetV1/Conv2d_13_pointwise/weights/read_dequant.MobilenetV1/Conv2d_13_pointwise/weights/read:0:0 */, meta[relay.Constant][157] /* ty=Tensor[(256), float32] span=MobilenetV1/Conv2d_13_pointwise/weights/read_dequant.scale__156:0:0 */, meta[relay.Constant][158] /* ty=Tensor[(256), int32] span=MobilenetV1/Conv2d_13_pointwise/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(256, 256, 1, 1), float32] span=MobilenetV1/Conv2d_13_pointwise/weights/read_dequant:0:0 */;
  %237 = qnn.dequantize(meta[relay.Constant][159] /* ty=Tensor[(256), int32] span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Conv2D_bias_dequant.MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Conv2D_bias:0:0 */, meta[relay.Constant][160] /* ty=Tensor[(256), float32] span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Conv2D_bias_dequant.scale__98:0:0 */, meta[relay.Constant][161] /* ty=Tensor[(256), int32] span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(256), float32] span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Conv2D_bias_dequant:0:0 */;
  %238 = expand_dims(%237, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %239 = nn.conv2d(%235, %236, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 3, 3), float32] span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6_prequant:0:0 */;
  %240 = expand_dims(%238, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %241 = add(%239, %240) /* ty=Tensor[(1, 256, 3, 3), float32] */;
  %242 = clip(%241, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 3, 3), float32] span=Relu6__57:0:0 */;
  %243 = qnn.quantize(%242, 0.0186093f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6_quantize.scale__449:0:0 */, -128 /* ty=int32 span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 256, 3, 3), int8] span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6_quantize:0:0 */;
  %244 = qnn.dequantize(%243, 0.0186093f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6_quantize.scale__449:0:0 */, -128 /* ty=int32 span=MobilenetV1/Logits/AvgPool_1a/AvgPool_prequant__445_DequantizeLinear__525:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 256, 3, 3), float32] span=MobilenetV1/Logits/AvgPool_1a/AvgPool_prequant__445_DequantizeLinear__525:0:0 */;
  %245 = layout_transform(%244, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 3, 3, 256), float32] */;
  %246 = nn.avg_pool2d(%245, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC", out_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] span=MobilenetV1/Logits/AvgPool_1a/AvgPool_prequant:0:0 */;
  %247 = qnn.quantize(%246, 0.0186093f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6_quantize.scale__449:0:0 */, -128 /* ty=int32 span=MobilenetV1/Logits/AvgPool_1a/AvgPool_quantize:0:0 */, out_dtype="int8", axis=3) /* ty=Tensor[(1, 1, 1, 256), int8] span=MobilenetV1/Logits/AvgPool_1a/AvgPool_quantize:0:0 */;
  %248 = layout_transform(%247, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 1, 1), int8] */;
  %249 = reshape(%248, newshape=[1, 256, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), int8] span=MobilenetV1/Logits/Conv2d_1c_1x1/BiasAdd_prequant__451:0:0 */;
  %250 = qnn.dequantize(%249, 0.0186093f /* ty=float32 span=MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6_quantize.scale__449:0:0 */, -128 /* ty=int32 span=MobilenetV1/Logits/Conv2d_1c_1x1/BiasAdd_prequant__451_DequantizeLinear__536:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 256, 1, 1), float32] span=MobilenetV1/Logits/Conv2d_1c_1x1/BiasAdd_prequant__451_DequantizeLinear__536:0:0 */;
  %251 = qnn.dequantize(meta[relay.Constant][162] /* ty=Tensor[(2, 256, 1, 1), int8] span=MobilenetV1/Logits/Conv2d_1c_1x1/weights/read_dequant.MobilenetV1/Logits/Conv2d_1c_1x1/weights/read:0:0 */, meta[relay.Constant][163] /* ty=Tensor[(2), float32] span=MobilenetV1/Logits/Conv2d_1c_1x1/weights/read_dequant.scale__116:0:0 */, meta[relay.Constant][164] /* ty=Tensor[(2), int32] span=MobilenetV1/Logits/Conv2d_1c_1x1/weights/read_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(2, 256, 1, 1), float32] span=MobilenetV1/Logits/Conv2d_1c_1x1/weights/read_dequant:0:0 */;
  %252 = qnn.dequantize(meta[relay.Constant][165] /* ty=Tensor[(2), int32] span=MobilenetV1/Logits/Conv2d_1c_1x1/Conv2D_bias_dequant.MobilenetV1/Logits/Conv2d_1c_1x1/Conv2D_bias:0:0 */, meta[relay.Constant][166] /* ty=Tensor[(2), float32] span=MobilenetV1/Logits/Conv2d_1c_1x1/Conv2D_bias_dequant.scale__118:0:0 */, meta[relay.Constant][167] /* ty=Tensor[(2), int32] span=MobilenetV1/Logits/Conv2d_1c_1x1/Conv2D_bias_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(2), float32] span=MobilenetV1/Logits/Conv2d_1c_1x1/Conv2D_bias_dequant:0:0 */;
  %253 = expand_dims(%252, axis=1, num_newaxis=2) /* ty=Tensor[(2, 1, 1), float32] */;
  %254 = nn.conv2d(%250, %251, padding=[0, 0, 0, 0], channels=2, kernel_size=[1, 1]) /* ty=Tensor[(1, 2, 1, 1), float32] span=MobilenetV1/Logits/Conv2d_1c_1x1/BiasAdd_prequant:0:0 */;
  %255 = expand_dims(%253, axis=0) /* ty=Tensor[(1, 2, 1, 1), float32] */;
  %256 = add(%254, %255) /* ty=Tensor[(1, 2, 1, 1), float32] */;
  %257 = qnn.quantize(%256, 0.0125188f /* ty=float32 span=MobilenetV1/Logits/Conv2d_1c_1x1/BiasAdd_quantize.scale__456:0:0 */, -1 /* ty=int32 span=MobilenetV1/Logits/Conv2d_1c_1x1/BiasAdd_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 2, 1, 1), int8] span=MobilenetV1/Logits/Conv2d_1c_1x1/BiasAdd_quantize:0:0 */;
  %258 = reshape(%257, newshape=[1, 2]) /* ty=Tensor[(1, 2), int8] span=MobilenetV1/Logits/SpatialSqueeze_prequant:0:0 */;
  %259 = qnn.dequantize(%258, 0.0125188f /* ty=float32 span=MobilenetV1/Logits/Conv2d_1c_1x1/BiasAdd_quantize.scale__456:0:0 */, -1 /* ty=int32 span=MobilenetV1/Logits/SpatialSqueeze_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 2), float32] span=MobilenetV1/Logits/SpatialSqueeze_dequant:0:0 */;
  %260 = nn.softmax(%259, axis=1) /* ty=Tensor[(1, 2), float32] span=MobilenetV1/Predictions/Reshape_1_prequant:0:0 */;
  qnn.quantize(%260, 0.00390625f /* ty=float32 span=MobilenetV1/Predictions/Reshape_1_quantize.scale__463:0:0 */, -128 /* ty=int32 span=MobilenetV1/Predictions/Reshape_1_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 2), int8] span=MobilenetV1/Predictions/Reshape_1_quantize:0:0 */
}

