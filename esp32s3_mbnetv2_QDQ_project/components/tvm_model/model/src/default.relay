def @main(%sub_7: Tensor[(1, 513, 513, 3), float32] /* ty=Tensor[(1, 513, 513, 3), float32] span=sub_7_int8.sub_7:0:0 */) -> Tensor[(1, 513, 513, 21), float32] {
  %0 = qnn.quantize(%sub_7, 0.00784313f /* ty=float32 span=sub_7_int8.scale__99:0:0 */, 0 /* ty=int32 span=sub_7_int8:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 513, 513, 3), int8] span=sub_7_int8:0:0 */;
  %1 = transpose(%0, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 3, 513, 513), int8] span=tfl.conv_2d_prequant__265:0:0 */;
  %2 = qnn.dequantize(%1, 0.00784313f /* ty=float32 span=sub_7_int8.scale__99:0:0 */, 0 /* ty=int32 span=tfl.conv_2d_prequant__265_DequantizeLinear__1324:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 3, 513, 513), float32] span=tfl.conv_2d_prequant__265_DequantizeLinear__1324:0:0 */;
  %3 = qnn.dequantize(meta[relay.Constant][0] /* ty=Tensor[(16, 3, 3, 3), int8] span=std.constant_dequant.std.constant:0:0 */, meta[relay.Constant][1] /* ty=Tensor[(16), float32] span=std.constant_dequant.scale__263:0:0 */, meta[relay.Constant][2] /* ty=Tensor[(16), int32] span=std.constant_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16, 3, 3, 3), float32] span=std.constant_dequant:0:0 */;
  %4 = qnn.dequantize(meta[relay.Constant][3] /* ty=Tensor[(16), int32] span=std.constant37_dequant.std.constant37:0:0 */, meta[relay.Constant][4] /* ty=Tensor[(16), float32] span=std.constant37_dequant.scale__201:0:0 */, meta[relay.Constant][5] /* ty=Tensor[(16), int32] span=std.constant37_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16), float32] span=std.constant37_dequant:0:0 */;
  %5 = expand_dims(%4, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %6 = nn.conv2d(%2, %3, strides=[2, 2], padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 257, 257), float32] span=tfl.conv_2d_prequant:0:0 */;
  %7 = expand_dims(%5, axis=0) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %8 = add(%6, %7) /* ty=Tensor[(1, 16, 257, 257), float32] */;
  %9 = clip(%8, a_min=0f, a_max=6f) /* ty=Tensor[(1, 16, 257, 257), float32] span=Relu6__5:0:0 */;
  %10 = qnn.quantize(%9, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 16, 257, 257), int8] span=tfl.conv_2d_quantize:0:0 */;
  %11 = qnn.dequantize(%10, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d_prequant__356_DequantizeLinear__1417:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 16, 257, 257), float32] span=tfl.depthwise_conv_2d_prequant__356_DequantizeLinear__1417:0:0 */;
  %12 = qnn.dequantize(meta[relay.Constant][6] /* ty=Tensor[(16, 1, 3, 3), int8] span=std.constant38_dequant.std.constant38:0:0 */, meta[relay.Constant][7] /* ty=Tensor[(16), float32] span=std.constant38_dequant.scale__199:0:0 */, meta[relay.Constant][8] /* ty=Tensor[(16), int32] span=std.constant38_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16, 1, 3, 3), float32] span=std.constant38_dequant:0:0 */;
  %13 = qnn.dequantize(meta[relay.Constant][9] /* ty=Tensor[(16), int32] span=MobilenetV2/expanded_conv/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv/depthwise/BatchNorm/FusedBatchNorm:0:0 */, meta[relay.Constant][10] /* ty=Tensor[(16), float32] span=MobilenetV2/expanded_conv/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__354:0:0 */, meta[relay.Constant][11] /* ty=Tensor[(16), int32] span=MobilenetV2/expanded_conv/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16), float32] span=MobilenetV2/expanded_conv/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %14 = expand_dims(%13, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %15 = nn.conv2d(%11, %12, padding=[1, 1, 1, 1], groups=16, channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 257, 257), float32] span=tfl.depthwise_conv_2d_prequant:0:0 */;
  %16 = expand_dims(%14, axis=0) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %17 = add(%15, %16) /* ty=Tensor[(1, 16, 257, 257), float32] */;
  %18 = clip(%17, a_min=0f, a_max=6f) /* ty=Tensor[(1, 16, 257, 257), float32] span=Relu6__7:0:0 */;
  %19 = qnn.quantize(%18, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 16, 257, 257), int8] span=tfl.depthwise_conv_2d_quantize:0:0 */;
  %20 = qnn.dequantize(%19, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d1_prequant__367_DequantizeLinear__1470:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 16, 257, 257), float32] span=tfl.conv_2d1_prequant__367_DequantizeLinear__1470:0:0 */;
  %21 = qnn.dequantize(meta[relay.Constant][12] /* ty=Tensor[(8, 16, 1, 1), int8] span=std.constant1_dequant.std.constant1:0:0 */, meta[relay.Constant][13] /* ty=Tensor[(8), float32] span=std.constant1_dequant.scale__261:0:0 */, meta[relay.Constant][14] /* ty=Tensor[(8), int32] span=std.constant1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(8, 16, 1, 1), float32] span=std.constant1_dequant:0:0 */;
  %22 = qnn.dequantize(meta[relay.Constant][15] /* ty=Tensor[(8), int32] span=std.constant39_dequant.std.constant39:0:0 */, meta[relay.Constant][16] /* ty=Tensor[(8), float32] span=std.constant39_dequant.scale__197:0:0 */, meta[relay.Constant][17] /* ty=Tensor[(8), int32] span=std.constant39_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(8), float32] span=std.constant39_dequant:0:0 */;
  %23 = expand_dims(%22, axis=1, num_newaxis=2) /* ty=Tensor[(8, 1, 1), float32] */;
  %24 = nn.conv2d(%20, %21, padding=[0, 0, 0, 0], channels=8, kernel_size=[1, 1]) /* ty=Tensor[(1, 8, 257, 257), float32] span=tfl.conv_2d1_prequant:0:0 */;
  %25 = expand_dims(%23, axis=0) /* ty=Tensor[(1, 8, 1, 1), float32] */;
  %26 = add(%24, %25) /* ty=Tensor[(1, 8, 257, 257), float32] */;
  %27 = qnn.quantize(%26, 0.389598f /* ty=float32 span=tfl.conv_2d1_quantize.scale__370:0:0 */, 2 /* ty=int32 span=tfl.conv_2d1_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 8, 257, 257), int8] span=tfl.conv_2d1_quantize:0:0 */;
  %28 = qnn.dequantize(%27, 0.389598f /* ty=float32 span=tfl.conv_2d1_quantize.scale__370:0:0 */, 2 /* ty=int32 span=tfl.conv_2d2_prequant__374_DequantizeLinear__1438:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 8, 257, 257), float32] span=tfl.conv_2d2_prequant__374_DequantizeLinear__1438:0:0 */;
  %29 = qnn.dequantize(meta[relay.Constant][18] /* ty=Tensor[(48, 8, 1, 1), int8] span=std.constant2_dequant.std.constant2:0:0 */, meta[relay.Constant][19] /* ty=Tensor[(48), float32] span=std.constant2_dequant.scale__239:0:0 */, meta[relay.Constant][20] /* ty=Tensor[(48), int32] span=std.constant2_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(48, 8, 1, 1), float32] span=std.constant2_dequant:0:0 */;
  %30 = qnn.dequantize(meta[relay.Constant][21] /* ty=Tensor[(48), int32] span=std.constant40_dequant.std.constant40:0:0 */, meta[relay.Constant][22] /* ty=Tensor[(48), float32] span=std.constant40_dequant.scale__193:0:0 */, meta[relay.Constant][23] /* ty=Tensor[(48), int32] span=std.constant40_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(48), float32] span=std.constant40_dequant:0:0 */;
  %31 = expand_dims(%30, axis=1, num_newaxis=2) /* ty=Tensor[(48, 1, 1), float32] */;
  %32 = nn.conv2d(%28, %29, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 257, 257), float32] span=tfl.conv_2d2_prequant:0:0 */;
  %33 = expand_dims(%31, axis=0) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %34 = add(%32, %33) /* ty=Tensor[(1, 48, 257, 257), float32] */;
  %35 = clip(%34, a_min=0f, a_max=6f) /* ty=Tensor[(1, 48, 257, 257), float32] span=Relu6__10:0:0 */;
  %36 = qnn.quantize(%35, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 48, 257, 257), int8] span=tfl.conv_2d2_quantize:0:0 */;
  %37 = qnn.dequantize(%36, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d1_prequant__383_DequantizeLinear__1410:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 48, 257, 257), float32] span=tfl.depthwise_conv_2d1_prequant__383_DequantizeLinear__1410:0:0 */;
  %38 = qnn.dequantize(meta[relay.Constant][24] /* ty=Tensor[(48, 1, 3, 3), int8] span=std.constant41_dequant.std.constant41:0:0 */, meta[relay.Constant][25] /* ty=Tensor[(48), float32] span=std.constant41_dequant.scale__191:0:0 */, meta[relay.Constant][26] /* ty=Tensor[(48), int32] span=std.constant41_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(48, 1, 3, 3), float32] span=std.constant41_dequant:0:0 */;
  %39 = qnn.dequantize(meta[relay.Constant][27] /* ty=Tensor[(48), int32] span=MobilenetV2/expanded_conv_1/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_1/depthwise/BatchNorm/FusedBatchNorm:0:0 */, meta[relay.Constant][28] /* ty=Tensor[(48), float32] span=MobilenetV2/expanded_conv_1/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__352:0:0 */, meta[relay.Constant][29] /* ty=Tensor[(48), int32] span=MobilenetV2/expanded_conv_1/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(48), float32] span=MobilenetV2/expanded_conv_1/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %40 = expand_dims(%39, axis=1, num_newaxis=2) /* ty=Tensor[(48, 1, 1), float32] */;
  %41 = nn.conv2d(%37, %38, strides=[2, 2], padding=[1, 1, 1, 1], groups=48, channels=48, kernel_size=[3, 3]) /* ty=Tensor[(1, 48, 129, 129), float32] span=tfl.depthwise_conv_2d1_prequant:0:0 */;
  %42 = expand_dims(%40, axis=0) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %43 = add(%41, %42) /* ty=Tensor[(1, 48, 129, 129), float32] */;
  %44 = clip(%43, a_min=0f, a_max=6f) /* ty=Tensor[(1, 48, 129, 129), float32] span=Relu6__12:0:0 */;
  %45 = qnn.quantize(%44, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d1_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 48, 129, 129), int8] span=tfl.depthwise_conv_2d1_quantize:0:0 */;
  %46 = qnn.dequantize(%45, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d3_prequant__394_DequantizeLinear__1445:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 48, 129, 129), float32] span=tfl.conv_2d3_prequant__394_DequantizeLinear__1445:0:0 */;
  %47 = qnn.dequantize(meta[relay.Constant][30] /* ty=Tensor[(12, 48, 1, 1), int8] span=std.constant3_dequant.std.constant3:0:0 */, meta[relay.Constant][31] /* ty=Tensor[(12), float32] span=std.constant3_dequant.scale__217:0:0 */, meta[relay.Constant][32] /* ty=Tensor[(12), int32] span=std.constant3_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(12, 48, 1, 1), float32] span=std.constant3_dequant:0:0 */;
  %48 = qnn.dequantize(meta[relay.Constant][33] /* ty=Tensor[(12), int32] span=std.constant42_dequant.std.constant42:0:0 */, meta[relay.Constant][34] /* ty=Tensor[(12), float32] span=std.constant42_dequant.scale__189:0:0 */, meta[relay.Constant][35] /* ty=Tensor[(12), int32] span=std.constant42_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(12), float32] span=std.constant42_dequant:0:0 */;
  %49 = expand_dims(%48, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
  %50 = nn.conv2d(%46, %47, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 129, 129), float32] span=tfl.conv_2d3_prequant:0:0 */;
  %51 = expand_dims(%49, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %52 = add(%50, %51) /* ty=Tensor[(1, 12, 129, 129), float32] */;
  %53 = qnn.quantize(%52, 0.335761f /* ty=float32 span=tfl.conv_2d3_quantize.scale__399:0:0 */, -7 /* ty=int32 span=tfl.conv_2d3_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 129, 129), int8] span=tfl.conv_2d3_quantize:0:0 */;
  %54 = qnn.dequantize(%53, 0.335761f /* ty=float32 span=tfl.conv_2d3_quantize.scale__399:0:0 */, -7 /* ty=int32 span=tfl.conv_2d3_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 12, 129, 129), float32] span=tfl.conv_2d3_dequant:0:0 */;
  %55 = qnn.dequantize(meta[relay.Constant][36] /* ty=Tensor[(72, 12, 1, 1), int8] span=std.constant4_dequant.std.constant4:0:0 */, meta[relay.Constant][37] /* ty=Tensor[(72), float32] span=std.constant4_dequant.scale__195:0:0 */, meta[relay.Constant][38] /* ty=Tensor[(72), int32] span=std.constant4_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(72, 12, 1, 1), float32] span=std.constant4_dequant:0:0 */;
  %56 = qnn.dequantize(meta[relay.Constant][39] /* ty=Tensor[(72), int32] span=std.constant43_dequant.std.constant43:0:0 */, meta[relay.Constant][40] /* ty=Tensor[(72), float32] span=std.constant43_dequant.scale__187:0:0 */, meta[relay.Constant][41] /* ty=Tensor[(72), int32] span=std.constant43_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(72), float32] span=std.constant43_dequant:0:0 */;
  %57 = expand_dims(%56, axis=1, num_newaxis=2) /* ty=Tensor[(72, 1, 1), float32] */;
  %58 = nn.conv2d(%54, %55, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 129, 129), float32] span=tfl.conv_2d4_prequant:0:0 */;
  %59 = expand_dims(%57, axis=0) /* ty=Tensor[(1, 72, 1, 1), float32] */;
  %60 = add(%58, %59) /* ty=Tensor[(1, 72, 129, 129), float32] */;
  %61 = clip(%60, a_min=0f, a_max=6f) /* ty=Tensor[(1, 72, 129, 129), float32] span=Relu6__15:0:0 */;
  %62 = qnn.quantize(%61, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d4_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 72, 129, 129), int8] span=tfl.conv_2d4_quantize:0:0 */;
  %63 = qnn.dequantize(%62, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d2_prequant__410_DequantizeLinear__1455:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 72, 129, 129), float32] span=tfl.depthwise_conv_2d2_prequant__410_DequantizeLinear__1455:0:0 */;
  %64 = qnn.dequantize(meta[relay.Constant][42] /* ty=Tensor[(72, 1, 3, 3), int8] span=std.constant44_dequant.std.constant44:0:0 */, meta[relay.Constant][43] /* ty=Tensor[(72), float32] span=std.constant44_dequant.scale__185:0:0 */, meta[relay.Constant][44] /* ty=Tensor[(72), int32] span=std.constant44_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(72, 1, 3, 3), float32] span=std.constant44_dequant:0:0 */;
  %65 = qnn.dequantize(meta[relay.Constant][45] /* ty=Tensor[(72), int32] span=MobilenetV2/expanded_conv_2/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_2/depthwise/BatchNorm/FusedBatchNorm:0:0 */, meta[relay.Constant][46] /* ty=Tensor[(72), float32] span=MobilenetV2/expanded_conv_2/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__302:0:0 */, meta[relay.Constant][47] /* ty=Tensor[(72), int32] span=MobilenetV2/expanded_conv_2/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(72), float32] span=MobilenetV2/expanded_conv_2/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %66 = expand_dims(%65, axis=1, num_newaxis=2) /* ty=Tensor[(72, 1, 1), float32] */;
  %67 = nn.conv2d(%63, %64, padding=[1, 1, 1, 1], groups=72, channels=72, kernel_size=[3, 3]) /* ty=Tensor[(1, 72, 129, 129), float32] span=tfl.depthwise_conv_2d2_prequant:0:0 */;
  %68 = expand_dims(%66, axis=0) /* ty=Tensor[(1, 72, 1, 1), float32] */;
  %69 = add(%67, %68) /* ty=Tensor[(1, 72, 129, 129), float32] */;
  %70 = clip(%69, a_min=0f, a_max=6f) /* ty=Tensor[(1, 72, 129, 129), float32] span=Relu6__17:0:0 */;
  %71 = qnn.quantize(%70, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 72, 129, 129), int8] span=tfl.depthwise_conv_2d2_quantize:0:0 */;
  %72 = qnn.dequantize(%71, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d5_prequant__421_DequantizeLinear__1429:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 72, 129, 129), float32] span=tfl.conv_2d5_prequant__421_DequantizeLinear__1429:0:0 */;
  %73 = qnn.dequantize(meta[relay.Constant][48] /* ty=Tensor[(12, 72, 1, 1), int8] span=std.constant5_dequant.std.constant5:0:0 */, meta[relay.Constant][49] /* ty=Tensor[(12), float32] span=std.constant5_dequant.scale__173:0:0 */, meta[relay.Constant][50] /* ty=Tensor[(12), int32] span=std.constant5_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(12, 72, 1, 1), float32] span=std.constant5_dequant:0:0 */;
  %74 = qnn.dequantize(meta[relay.Constant][51] /* ty=Tensor[(12), int32] span=std.constant45_dequant.std.constant45:0:0 */, meta[relay.Constant][52] /* ty=Tensor[(12), float32] span=std.constant45_dequant.scale__183:0:0 */, meta[relay.Constant][53] /* ty=Tensor[(12), int32] span=std.constant45_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(12), float32] span=std.constant45_dequant:0:0 */;
  %75 = expand_dims(%74, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
  %76 = nn.conv2d(%72, %73, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 129, 129), float32] span=tfl.conv_2d5_prequant:0:0 */;
  %77 = expand_dims(%75, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %78 = add(%76, %77) /* ty=Tensor[(1, 12, 129, 129), float32] */;
  %79 = qnn.quantize(%78, 0.514195f /* ty=float32 span=tfl.conv_2d5_quantize.scale__424:0:0 */, -16 /* ty=int32 span=tfl.conv_2d5_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 129, 129), int8] span=tfl.conv_2d5_quantize:0:0 */;
  %80 = qnn.dequantize(%79, 0.514195f /* ty=float32 span=tfl.conv_2d5_quantize.scale__424:0:0 */, -16 /* ty=int32 span=tfl.conv_2d5_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 12, 129, 129), float32] span=tfl.conv_2d5_dequant:0:0 */;
  %81 = add(%80, %54) /* ty=Tensor[(1, 12, 129, 129), float32] span=MobilenetV2/expanded_conv_2/add_prequant:0:0 */;
  %82 = qnn.quantize(%81, 0.44064f /* ty=float32 span=MobilenetV2/expanded_conv_2/add_quantize.scale__430:0:0 */, -5 /* ty=int32 span=MobilenetV2/expanded_conv_2/add_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 12, 129, 129), int8] span=MobilenetV2/expanded_conv_2/add_quantize:0:0 */;
  %83 = qnn.dequantize(%82, 0.44064f /* ty=float32 span=MobilenetV2/expanded_conv_2/add_quantize.scale__430:0:0 */, -5 /* ty=int32 span=tfl.conv_2d6_prequant__432_DequantizeLinear__1463:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 12, 129, 129), float32] span=tfl.conv_2d6_prequant__432_DequantizeLinear__1463:0:0 */;
  %84 = qnn.dequantize(meta[relay.Constant][54] /* ty=Tensor[(72, 12, 1, 1), int8] span=std.constant6_dequant.std.constant6:0:0 */, meta[relay.Constant][55] /* ty=Tensor[(72), float32] span=std.constant6_dequant.scale__151:0:0 */, meta[relay.Constant][56] /* ty=Tensor[(72), int32] span=std.constant6_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(72, 12, 1, 1), float32] span=std.constant6_dequant:0:0 */;
  %85 = qnn.dequantize(meta[relay.Constant][57] /* ty=Tensor[(72), int32] span=std.constant46_dequant.std.constant46:0:0 */, meta[relay.Constant][58] /* ty=Tensor[(72), float32] span=std.constant46_dequant.scale__181:0:0 */, meta[relay.Constant][59] /* ty=Tensor[(72), int32] span=std.constant46_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(72), float32] span=std.constant46_dequant:0:0 */;
  %86 = expand_dims(%85, axis=1, num_newaxis=2) /* ty=Tensor[(72, 1, 1), float32] */;
  %87 = nn.conv2d(%83, %84, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 129, 129), float32] span=tfl.conv_2d6_prequant:0:0 */;
  %88 = expand_dims(%86, axis=0) /* ty=Tensor[(1, 72, 1, 1), float32] */;
  %89 = add(%87, %88) /* ty=Tensor[(1, 72, 129, 129), float32] */;
  %90 = clip(%89, a_min=0f, a_max=6f) /* ty=Tensor[(1, 72, 129, 129), float32] span=Relu6__20:0:0 */;
  %91 = qnn.quantize(%90, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 72, 129, 129), int8] span=tfl.conv_2d6_quantize:0:0 */;
  %92 = qnn.dequantize(%91, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d3_prequant__441_DequantizeLinear__1412:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 72, 129, 129), float32] span=tfl.depthwise_conv_2d3_prequant__441_DequantizeLinear__1412:0:0 */;
  %93 = qnn.dequantize(meta[relay.Constant][60] /* ty=Tensor[(72, 1, 3, 3), int8] span=std.constant47_dequant.std.constant47:0:0 */, meta[relay.Constant][61] /* ty=Tensor[(72), float32] span=std.constant47_dequant.scale__179:0:0 */, meta[relay.Constant][62] /* ty=Tensor[(72), int32] span=std.constant47_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(72, 1, 3, 3), float32] span=std.constant47_dequant:0:0 */;
  %94 = qnn.dequantize(meta[relay.Constant][63] /* ty=Tensor[(72), int32] span=MobilenetV2/expanded_conv_3/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_3/depthwise/BatchNorm/FusedBatchNorm:0:0 */, meta[relay.Constant][64] /* ty=Tensor[(72), float32] span=MobilenetV2/expanded_conv_3/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__300:0:0 */, meta[relay.Constant][65] /* ty=Tensor[(72), int32] span=MobilenetV2/expanded_conv_3/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(72), float32] span=MobilenetV2/expanded_conv_3/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %95 = expand_dims(%94, axis=1, num_newaxis=2) /* ty=Tensor[(72, 1, 1), float32] */;
  %96 = nn.conv2d(%92, %93, strides=[2, 2], padding=[1, 1, 1, 1], groups=72, channels=72, kernel_size=[3, 3]) /* ty=Tensor[(1, 72, 65, 65), float32] span=tfl.depthwise_conv_2d3_prequant:0:0 */;
  %97 = expand_dims(%95, axis=0) /* ty=Tensor[(1, 72, 1, 1), float32] */;
  %98 = add(%96, %97) /* ty=Tensor[(1, 72, 65, 65), float32] */;
  %99 = clip(%98, a_min=0f, a_max=6f) /* ty=Tensor[(1, 72, 65, 65), float32] span=Relu6__22:0:0 */;
  %100 = qnn.quantize(%99, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d3_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 72, 65, 65), int8] span=tfl.depthwise_conv_2d3_quantize:0:0 */;
  %101 = qnn.dequantize(%100, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d7_prequant__452_DequantizeLinear__1425:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 72, 65, 65), float32] span=tfl.conv_2d7_prequant__452_DequantizeLinear__1425:0:0 */;
  %102 = qnn.dequantize(meta[relay.Constant][66] /* ty=Tensor[(16, 72, 1, 1), int8] span=std.constant7_dequant.std.constant7:0:0 */, meta[relay.Constant][67] /* ty=Tensor[(16), float32] span=std.constant7_dequant.scale__129:0:0 */, meta[relay.Constant][68] /* ty=Tensor[(16), int32] span=std.constant7_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16, 72, 1, 1), float32] span=std.constant7_dequant:0:0 */;
  %103 = qnn.dequantize(meta[relay.Constant][69] /* ty=Tensor[(16), int32] span=std.constant48_dequant.std.constant48:0:0 */, meta[relay.Constant][70] /* ty=Tensor[(16), float32] span=std.constant48_dequant.scale__177:0:0 */, meta[relay.Constant][71] /* ty=Tensor[(16), int32] span=std.constant48_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16), float32] span=std.constant48_dequant:0:0 */;
  %104 = expand_dims(%103, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %105 = nn.conv2d(%101, %102, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 65, 65), float32] span=tfl.conv_2d7_prequant:0:0 */;
  %106 = expand_dims(%104, axis=0) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %107 = add(%105, %106) /* ty=Tensor[(1, 16, 65, 65), float32] */;
  %108 = qnn.quantize(%107, 0.210557f /* ty=float32 span=tfl.conv_2d7_quantize.scale__457:0:0 */, 8 /* ty=int32 span=tfl.conv_2d7_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 16, 65, 65), int8] span=tfl.conv_2d7_quantize:0:0 */;
  %109 = qnn.dequantize(%108, 0.210557f /* ty=float32 span=tfl.conv_2d7_quantize.scale__457:0:0 */, 8 /* ty=int32 span=tfl.conv_2d7_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 16, 65, 65), float32] span=tfl.conv_2d7_dequant:0:0 */;
  %110 = qnn.dequantize(meta[relay.Constant][72] /* ty=Tensor[(96, 16, 1, 1), int8] span=std.constant8_dequant.std.constant8:0:0 */, meta[relay.Constant][73] /* ty=Tensor[(96), float32] span=std.constant8_dequant.scale__107:0:0 */, meta[relay.Constant][74] /* ty=Tensor[(96), int32] span=std.constant8_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(96, 16, 1, 1), float32] span=std.constant8_dequant:0:0 */;
  %111 = qnn.dequantize(meta[relay.Constant][75] /* ty=Tensor[(96), int32] span=std.constant49_dequant.std.constant49:0:0 */, meta[relay.Constant][76] /* ty=Tensor[(96), float32] span=std.constant49_dequant.scale__175:0:0 */, meta[relay.Constant][77] /* ty=Tensor[(96), int32] span=std.constant49_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(96), float32] span=std.constant49_dequant:0:0 */;
  %112 = expand_dims(%111, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %113 = nn.conv2d(%109, %110, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 65, 65), float32] span=tfl.conv_2d8_prequant:0:0 */;
  %114 = expand_dims(%112, axis=0) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %115 = add(%113, %114) /* ty=Tensor[(1, 96, 65, 65), float32] */;
  %116 = clip(%115, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 65, 65), float32] span=Relu6__25:0:0 */;
  %117 = qnn.quantize(%116, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d8_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 96, 65, 65), int8] span=tfl.conv_2d8_quantize:0:0 */;
  %118 = qnn.dequantize(%117, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d4_prequant__468_DequantizeLinear__1421:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 96, 65, 65), float32] span=tfl.depthwise_conv_2d4_prequant__468_DequantizeLinear__1421:0:0 */;
  %119 = qnn.dequantize(meta[relay.Constant][78] /* ty=Tensor[(96, 1, 3, 3), int8] span=std.constant50_dequant.std.constant50:0:0 */, meta[relay.Constant][79] /* ty=Tensor[(96), float32] span=std.constant50_dequant.scale__171:0:0 */, meta[relay.Constant][80] /* ty=Tensor[(96), int32] span=std.constant50_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(96, 1, 3, 3), float32] span=std.constant50_dequant:0:0 */;
  %120 = qnn.dequantize(meta[relay.Constant][81] /* ty=Tensor[(96), int32] span=MobilenetV2/expanded_conv_4/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_4/depthwise/BatchNorm/FusedBatchNorm:0:0 */, meta[relay.Constant][82] /* ty=Tensor[(96), float32] span=MobilenetV2/expanded_conv_4/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__298:0:0 */, meta[relay.Constant][83] /* ty=Tensor[(96), int32] span=MobilenetV2/expanded_conv_4/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(96), float32] span=MobilenetV2/expanded_conv_4/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %121 = expand_dims(%120, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %122 = nn.conv2d(%118, %119, padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 65, 65), float32] span=tfl.depthwise_conv_2d4_prequant:0:0 */;
  %123 = expand_dims(%121, axis=0) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %124 = add(%122, %123) /* ty=Tensor[(1, 96, 65, 65), float32] */;
  %125 = clip(%124, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 65, 65), float32] span=Relu6__27:0:0 */;
  %126 = qnn.quantize(%125, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d4_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 96, 65, 65), int8] span=tfl.depthwise_conv_2d4_quantize:0:0 */;
  %127 = qnn.dequantize(%126, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d9_prequant__479_DequantizeLinear__1413:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 96, 65, 65), float32] span=tfl.conv_2d9_prequant__479_DequantizeLinear__1413:0:0 */;
  %128 = qnn.dequantize(meta[relay.Constant][84] /* ty=Tensor[(16, 96, 1, 1), int8] span=std.constant9_dequant.std.constant9:0:0 */, meta[relay.Constant][85] /* ty=Tensor[(16), float32] span=std.constant9_dequant.scale__101:0:0 */, meta[relay.Constant][86] /* ty=Tensor[(16), int32] span=std.constant9_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16, 96, 1, 1), float32] span=std.constant9_dequant:0:0 */;
  %129 = qnn.dequantize(meta[relay.Constant][87] /* ty=Tensor[(16), int32] span=std.constant51_dequant.std.constant51:0:0 */, meta[relay.Constant][88] /* ty=Tensor[(16), float32] span=std.constant51_dequant.scale__169:0:0 */, meta[relay.Constant][89] /* ty=Tensor[(16), int32] span=std.constant51_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16), float32] span=std.constant51_dequant:0:0 */;
  %130 = expand_dims(%129, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %131 = nn.conv2d(%127, %128, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 65, 65), float32] span=tfl.conv_2d9_prequant:0:0 */;
  %132 = expand_dims(%130, axis=0) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %133 = add(%131, %132) /* ty=Tensor[(1, 16, 65, 65), float32] */;
  %134 = qnn.quantize(%133, 0.143239f /* ty=float32 span=tfl.conv_2d9_quantize.scale__482:0:0 */, -2 /* ty=int32 span=tfl.conv_2d9_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 16, 65, 65), int8] span=tfl.conv_2d9_quantize:0:0 */;
  %135 = qnn.dequantize(%134, 0.143239f /* ty=float32 span=tfl.conv_2d9_quantize.scale__482:0:0 */, -2 /* ty=int32 span=tfl.conv_2d9_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 16, 65, 65), float32] span=tfl.conv_2d9_dequant:0:0 */;
  %136 = add(%135, %109) /* ty=Tensor[(1, 16, 65, 65), float32] span=MobilenetV2/expanded_conv_4/add_prequant:0:0 */;
  %137 = qnn.quantize(%136, 0.243543f /* ty=float32 span=MobilenetV2/expanded_conv_4/add_quantize.scale__488:0:0 */, -2 /* ty=int32 span=MobilenetV2/expanded_conv_4/add_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 16, 65, 65), int8] span=MobilenetV2/expanded_conv_4/add_quantize:0:0 */;
  %138 = qnn.dequantize(%137, 0.243543f /* ty=float32 span=MobilenetV2/expanded_conv_4/add_quantize.scale__488:0:0 */, -2 /* ty=int32 span=tfl.conv_2d10_prequant__490_DequantizeLinear__1474:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 16, 65, 65), float32] span=tfl.conv_2d10_prequant__490_DequantizeLinear__1474:0:0 */;
  %139 = qnn.dequantize(meta[relay.Constant][90] /* ty=Tensor[(96, 16, 1, 1), int8] span=std.constant10_dequant.std.constant10:0:0 */, meta[relay.Constant][91] /* ty=Tensor[(96), float32] span=std.constant10_dequant.scale__259:0:0 */, meta[relay.Constant][92] /* ty=Tensor[(96), int32] span=std.constant10_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(96, 16, 1, 1), float32] span=std.constant10_dequant:0:0 */;
  %140 = qnn.dequantize(meta[relay.Constant][93] /* ty=Tensor[(96), int32] span=std.constant52_dequant.std.constant52:0:0 */, meta[relay.Constant][94] /* ty=Tensor[(96), float32] span=std.constant52_dequant.scale__167:0:0 */, meta[relay.Constant][95] /* ty=Tensor[(96), int32] span=std.constant52_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(96), float32] span=std.constant52_dequant:0:0 */;
  %141 = expand_dims(%140, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %142 = nn.conv2d(%138, %139, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 65, 65), float32] span=tfl.conv_2d10_prequant:0:0 */;
  %143 = expand_dims(%141, axis=0) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %144 = add(%142, %143) /* ty=Tensor[(1, 96, 65, 65), float32] */;
  %145 = clip(%144, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 65, 65), float32] span=Relu6__30:0:0 */;
  %146 = qnn.quantize(%145, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d10_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 96, 65, 65), int8] span=tfl.conv_2d10_quantize:0:0 */;
  %147 = qnn.dequantize(%146, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d5_prequant__499_DequantizeLinear__1462:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 96, 65, 65), float32] span=tfl.depthwise_conv_2d5_prequant__499_DequantizeLinear__1462:0:0 */;
  %148 = qnn.dequantize(meta[relay.Constant][96] /* ty=Tensor[(96, 1, 3, 3), int8] span=std.constant53_dequant.std.constant53:0:0 */, meta[relay.Constant][97] /* ty=Tensor[(96), float32] span=std.constant53_dequant.scale__165:0:0 */, meta[relay.Constant][98] /* ty=Tensor[(96), int32] span=std.constant53_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(96, 1, 3, 3), float32] span=std.constant53_dequant:0:0 */;
  %149 = qnn.dequantize(meta[relay.Constant][99] /* ty=Tensor[(96), int32] span=MobilenetV2/expanded_conv_5/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_5/depthwise/BatchNorm/FusedBatchNorm:0:0 */, meta[relay.Constant][100] /* ty=Tensor[(96), float32] span=MobilenetV2/expanded_conv_5/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__296:0:0 */, meta[relay.Constant][101] /* ty=Tensor[(96), int32] span=MobilenetV2/expanded_conv_5/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(96), float32] span=MobilenetV2/expanded_conv_5/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %150 = expand_dims(%149, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %151 = nn.conv2d(%147, %148, padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 65, 65), float32] span=tfl.depthwise_conv_2d5_prequant:0:0 */;
  %152 = expand_dims(%150, axis=0) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %153 = add(%151, %152) /* ty=Tensor[(1, 96, 65, 65), float32] */;
  %154 = clip(%153, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 65, 65), float32] span=Relu6__32:0:0 */;
  %155 = qnn.quantize(%154, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d5_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 96, 65, 65), int8] span=tfl.depthwise_conv_2d5_quantize:0:0 */;
  %156 = qnn.dequantize(%155, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d11_prequant__510_DequantizeLinear__1476:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 96, 65, 65), float32] span=tfl.conv_2d11_prequant__510_DequantizeLinear__1476:0:0 */;
  %157 = qnn.dequantize(meta[relay.Constant][102] /* ty=Tensor[(16, 96, 1, 1), int8] span=std.constant11_dequant.std.constant11:0:0 */, meta[relay.Constant][103] /* ty=Tensor[(16), float32] span=std.constant11_dequant.scale__257:0:0 */, meta[relay.Constant][104] /* ty=Tensor[(16), int32] span=std.constant11_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16, 96, 1, 1), float32] span=std.constant11_dequant:0:0 */;
  %158 = qnn.dequantize(meta[relay.Constant][105] /* ty=Tensor[(16), int32] span=std.constant54_dequant.std.constant54:0:0 */, meta[relay.Constant][106] /* ty=Tensor[(16), float32] span=std.constant54_dequant.scale__163:0:0 */, meta[relay.Constant][107] /* ty=Tensor[(16), int32] span=std.constant54_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(16), float32] span=std.constant54_dequant:0:0 */;
  %159 = expand_dims(%158, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %160 = nn.conv2d(%156, %157, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 65, 65), float32] span=tfl.conv_2d11_prequant:0:0 */;
  %161 = expand_dims(%159, axis=0) /* ty=Tensor[(1, 16, 1, 1), float32] */;
  %162 = add(%160, %161) /* ty=Tensor[(1, 16, 65, 65), float32] */;
  %163 = qnn.quantize(%162, 0.14688f /* ty=float32 span=tfl.conv_2d11_quantize.scale__513:0:0 */, -2 /* ty=int32 span=tfl.conv_2d11_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 16, 65, 65), int8] span=tfl.conv_2d11_quantize:0:0 */;
  %164 = qnn.dequantize(%163, 0.14688f /* ty=float32 span=tfl.conv_2d11_quantize.scale__513:0:0 */, -2 /* ty=int32 span=tfl.conv_2d11_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 16, 65, 65), float32] span=tfl.conv_2d11_dequant:0:0 */;
  %165 = add(%164, %138) /* ty=Tensor[(1, 16, 65, 65), float32] span=MobilenetV2/expanded_conv_5/add_prequant:0:0 */;
  %166 = qnn.quantize(%165, 0.243438f /* ty=float32 span=MobilenetV2/expanded_conv_5/add_quantize.scale__519:0:0 */, 6 /* ty=int32 span=MobilenetV2/expanded_conv_5/add_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 16, 65, 65), int8] span=MobilenetV2/expanded_conv_5/add_quantize:0:0 */;
  %167 = qnn.dequantize(%166, 0.243438f /* ty=float32 span=MobilenetV2/expanded_conv_5/add_quantize.scale__519:0:0 */, 6 /* ty=int32 span=tfl.conv_2d12_prequant__521_DequantizeLinear__1475:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 16, 65, 65), float32] span=tfl.conv_2d12_prequant__521_DequantizeLinear__1475:0:0 */;
  %168 = qnn.dequantize(meta[relay.Constant][108] /* ty=Tensor[(96, 16, 1, 1), int8] span=std.constant12_dequant.std.constant12:0:0 */, meta[relay.Constant][109] /* ty=Tensor[(96), float32] span=std.constant12_dequant.scale__255:0:0 */, meta[relay.Constant][110] /* ty=Tensor[(96), int32] span=std.constant12_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(96, 16, 1, 1), float32] span=std.constant12_dequant:0:0 */;
  %169 = qnn.dequantize(meta[relay.Constant][111] /* ty=Tensor[(96), int32] span=std.constant55_dequant.std.constant55:0:0 */, meta[relay.Constant][112] /* ty=Tensor[(96), float32] span=std.constant55_dequant.scale__161:0:0 */, meta[relay.Constant][113] /* ty=Tensor[(96), int32] span=std.constant55_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(96), float32] span=std.constant55_dequant:0:0 */;
  %170 = expand_dims(%169, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %171 = nn.conv2d(%167, %168, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 65, 65), float32] span=tfl.conv_2d12_prequant:0:0 */;
  %172 = expand_dims(%170, axis=0) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %173 = add(%171, %172) /* ty=Tensor[(1, 96, 65, 65), float32] */;
  %174 = clip(%173, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 65, 65), float32] span=Relu6__35:0:0 */;
  %175 = qnn.quantize(%174, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d12_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 96, 65, 65), int8] span=tfl.conv_2d12_quantize:0:0 */;
  %176 = qnn.dequantize(%175, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d6_prequant__530_DequantizeLinear__1434:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 96, 65, 65), float32] span=tfl.depthwise_conv_2d6_prequant__530_DequantizeLinear__1434:0:0 */;
  %177 = qnn.dequantize(meta[relay.Constant][114] /* ty=Tensor[(96, 1, 3, 3), int8] span=std.constant56_dequant.std.constant56:0:0 */, meta[relay.Constant][115] /* ty=Tensor[(96), float32] span=std.constant56_dequant.scale__159:0:0 */, meta[relay.Constant][116] /* ty=Tensor[(96), int32] span=std.constant56_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(96, 1, 3, 3), float32] span=std.constant56_dequant:0:0 */;
  %178 = qnn.dequantize(meta[relay.Constant][117] /* ty=Tensor[(96), int32] span=MobilenetV2/expanded_conv_6/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_6/depthwise/BatchNorm/FusedBatchNorm:0:0 */, meta[relay.Constant][118] /* ty=Tensor[(96), float32] span=MobilenetV2/expanded_conv_6/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__294:0:0 */, meta[relay.Constant][119] /* ty=Tensor[(96), int32] span=MobilenetV2/expanded_conv_6/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(96), float32] span=MobilenetV2/expanded_conv_6/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %179 = expand_dims(%178, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %180 = nn.conv2d(%176, %177, padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 65, 65), float32] span=tfl.depthwise_conv_2d6_prequant:0:0 */;
  %181 = expand_dims(%179, axis=0) /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %182 = add(%180, %181) /* ty=Tensor[(1, 96, 65, 65), float32] */;
  %183 = clip(%182, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 65, 65), float32] span=Relu6__37:0:0 */;
  %184 = qnn.quantize(%183, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.depthwise_conv_2d6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 96, 65, 65), int8] span=tfl.depthwise_conv_2d6_quantize:0:0 */;
  %185 = qnn.dequantize(%184, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d13_prequant__541_DequantizeLinear__1442:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 96, 65, 65), float32] span=tfl.conv_2d13_prequant__541_DequantizeLinear__1442:0:0 */;
  %186 = qnn.dequantize(meta[relay.Constant][120] /* ty=Tensor[(32, 96, 1, 1), int8] span=std.constant13_dequant.std.constant13:0:0 */, meta[relay.Constant][121] /* ty=Tensor[(32), float32] span=std.constant13_dequant.scale__253:0:0 */, meta[relay.Constant][122] /* ty=Tensor[(32), int32] span=std.constant13_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32, 96, 1, 1), float32] span=std.constant13_dequant:0:0 */;
  %187 = qnn.dequantize(meta[relay.Constant][123] /* ty=Tensor[(32), int32] span=std.constant57_dequant.std.constant57:0:0 */, meta[relay.Constant][124] /* ty=Tensor[(32), float32] span=std.constant57_dequant.scale__157:0:0 */, meta[relay.Constant][125] /* ty=Tensor[(32), int32] span=std.constant57_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32), float32] span=std.constant57_dequant:0:0 */;
  %188 = expand_dims(%187, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %189 = nn.conv2d(%185, %186, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 65, 65), float32] span=tfl.conv_2d13_prequant:0:0 */;
  %190 = expand_dims(%188, axis=0) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %191 = add(%189, %190) /* ty=Tensor[(1, 32, 65, 65), float32] */;
  %192 = qnn.quantize(%191, 0.186671f /* ty=float32 span=tfl.conv_2d13_quantize.scale__546:0:0 */, -14 /* ty=int32 span=tfl.conv_2d13_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 32, 65, 65), int8] span=tfl.conv_2d13_quantize:0:0 */;
  %193 = qnn.dequantize(%192, 0.186671f /* ty=float32 span=tfl.conv_2d13_quantize.scale__546:0:0 */, -14 /* ty=int32 span=tfl.conv_2d14_prequant__548_DequantizeLinear__1406:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 32, 65, 65), float32] span=tfl.conv_2d14_prequant__548_DequantizeLinear__1406:0:0 */;
  %194 = qnn.dequantize(meta[relay.Constant][126] /* ty=Tensor[(192, 32, 1, 1), int8] span=std.constant14_dequant.std.constant14:0:0 */, meta[relay.Constant][127] /* ty=Tensor[(192), float32] span=std.constant14_dequant.scale__251:0:0 */, meta[relay.Constant][128] /* ty=Tensor[(192), int32] span=std.constant14_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192, 32, 1, 1), float32] span=std.constant14_dequant:0:0 */;
  %195 = qnn.dequantize(meta[relay.Constant][129] /* ty=Tensor[(192), int32] span=std.constant58_dequant.std.constant58:0:0 */, meta[relay.Constant][130] /* ty=Tensor[(192), float32] span=std.constant58_dequant.scale__155:0:0 */, meta[relay.Constant][131] /* ty=Tensor[(192), int32] span=std.constant58_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=std.constant58_dequant:0:0 */;
  %196 = expand_dims(%195, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %197 = nn.conv2d(%193, %194, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 65, 65), float32] span=tfl.conv_2d14_prequant:0:0 */;
  %198 = expand_dims(%196, axis=0) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %199 = add(%197, %198) /* ty=Tensor[(1, 192, 65, 65), float32] */;
  %200 = clip(%199, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 65, 65), float32] span=Relu6__40:0:0 */;
  %201 = qnn.quantize(%200, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d14_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 192, 65, 65), int8] span=tfl.conv_2d14_quantize:0:0 */;
  %202 = qnn.dequantize(%201, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d14_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 192, 65, 65), float32] span=tfl.conv_2d14_dequant:0:0 */;
  %203 = nn.pad(%202, 0f /* ty=float32 span=Pad__560:0:0 */, pad_width=[[0i64, 0i64], [0i64, 0i64], [2i64, 3i64], [2i64, 3i64]]) /* ty=Tensor[(1, 192, 70, 70), float32] span=Pad__560:0:0 */;
  %204 = reshape(%203, newshape=[192, 1, 70, 70]) /* ty=Tensor[(192, 1, 70, 70), float32] span=Transpose__558:0:0 */;
  %205 = nn.space_to_depth(%204, block_size=2, mode="") /* ty=Tensor[(192, 4, 35, 35), float32] span=SpaceToDepth__561:0:0 */;
  %206 = qnn.quantize(%205, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_7/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(192, 4, 35, 35), int8] span=MobilenetV2/expanded_conv_7/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */;
  %207 = transpose(%206, axes=[1, 0, 2, 3]) /* ty=Tensor[(4, 192, 35, 35), int8] span=MobilenetV2/expanded_conv_7/depthwise/depthwise1_prequant__567:0:0 */;
  %208 = qnn.dequantize(%207, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_7/depthwise/depthwise1_prequant__567_DequantizeLinear__1482:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(4, 192, 35, 35), float32] span=MobilenetV2/expanded_conv_7/depthwise/depthwise1_prequant__567_DequantizeLinear__1482:0:0 */;
  %209 = qnn.dequantize(meta[relay.Constant][132] /* ty=Tensor[(192, 1, 3, 3), int8] span=MobilenetV2/expanded_conv_7/depthwise/depthwise_dequant.MobilenetV2/expanded_conv_7/depthwise/depthwise:0:0 */, meta[relay.Constant][133] /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_7/depthwise/depthwise_dequant.scale__288:0:0 */, meta[relay.Constant][134] /* ty=Tensor[(192), int32] span=MobilenetV2/expanded_conv_7/depthwise/depthwise_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192, 1, 3, 3), float32] span=MobilenetV2/expanded_conv_7/depthwise/depthwise_dequant:0:0 */;
  %210 = qnn.dequantize(meta[relay.Constant][135] /* ty=Tensor[(192), int32] span=std.constant58_dequant.zero_point__156:0:0 */, meta[relay.Constant][136] /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_10/depthwise/depthwise_dequant.scale__346:0:0 */, meta[relay.Constant][137] /* ty=Tensor[(192), int32] span=MobilenetV2/expanded_conv_10/depthwise/depthwise_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_10/depthwise/depthwise_dequant:0:0 */;
  %211 = expand_dims(%210, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %212 = nn.conv2d(%208, %209, padding=[0, 0, 0, 0], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(4, 192, 33, 33), float32] span=MobilenetV2/expanded_conv_7/depthwise/depthwise1_prequant:0:0 */;
  %213 = expand_dims(%211, axis=0) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %214 = add(%212, %213) /* ty=Tensor[(4, 192, 33, 33), float32] */;
  %215 = qnn.quantize(%214, 0.19932f /* ty=float32 span=MobilenetV2/expanded_conv_7/depthwise/depthwise1_quantize.scale__586:0:0 */, 2 /* ty=int32 span=MobilenetV2/expanded_conv_7/depthwise/depthwise1_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(4, 192, 33, 33), int8] span=MobilenetV2/expanded_conv_7/depthwise/depthwise1_quantize:0:0 */;
  %216 = transpose(%215, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 4, 33, 33), int8] span=Transpose__577:0:0 */;
  %217 = nn.depth_to_space(%216, block_size=2) /* ty=Tensor[(192, 1, 66, 66), int8] span=DepthToSpace__578:0:0 */;
  %218 = strided_slice(%217, begin=[0i64, 0i64], end=[-1i64, -1i64], strides=[1i64, 1i64], axes=[2i64, 3i64]) /* ty=Tensor[(192, 1, 65, 65), int8] span=Slice__582:0:0 */;
  %219 = reshape(%218, newshape=[1, 192, 65, 65]) /* ty=Tensor[(1, 192, 65, 65), int8] span=Transpose__583:0:0 */;
  %220 = transpose(%219, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 65, 65, 192), int8] span=MobilenetV2/expanded_conv_7/depthwise/depthwise/BatchToSpaceND_prequant:0:0 */;
  %221 = qnn.dequantize(%220, 0.19932f /* ty=float32 span=MobilenetV2/expanded_conv_7/depthwise/depthwise1_quantize.scale__586:0:0 */, 2 /* ty=int32 span=MobilenetV2/expanded_conv_7/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1513:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 192), float32] span=MobilenetV2/expanded_conv_7/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1513:0:0 */;
  %222 = qnn.dequantize(meta[relay.Constant][138] /* ty=Tensor[(192), int8] span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm1_dequant.MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm1:0:0 */, 0.0803616f /* ty=float32 span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm1_dequant.scale__290:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */;
  %223 = multiply(%221, %222) /* ty=Tensor[(1, 65, 65, 192), float32] span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm2_prequant:0:0 */;
  %224 = qnn.quantize(%223, 0.425456f /* ty=float32 span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__590:0:0 */, -83 /* ty=int32 span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 192), int8] span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */;
  %225 = qnn.dequantize(%224, 0.425456f /* ty=float32 span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__590:0:0 */, -83 /* ty=int32 span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 192), float32] span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */;
  %226 = qnn.dequantize(meta[relay.Constant][139] /* ty=Tensor[(192), int8] span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm:0:0 */, 0.625594f /* ty=float32 span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__292:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %227 = add(%225, %226) /* ty=Tensor[(1, 65, 65, 192), float32] span=tfl.add_prequant:0:0 */;
  %228 = clip(%227, a_min=0f, a_max=6f) /* ty=Tensor[(1, 65, 65, 192), float32] span=Relu6__43:0:0 */;
  %229 = qnn.quantize(%228, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.add_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 192), int8] span=tfl.add_quantize:0:0 */;
  %230 = transpose(%229, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 192, 65, 65), int8] span=tfl.conv_2d15_prequant__598:0:0 */;
  %231 = qnn.dequantize(%230, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d15_prequant__598_DequantizeLinear__1371:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 192, 65, 65), float32] span=tfl.conv_2d15_prequant__598_DequantizeLinear__1371:0:0 */;
  %232 = qnn.dequantize(meta[relay.Constant][140] /* ty=Tensor[(32, 192, 1, 1), int8] span=std.constant15_dequant.std.constant15:0:0 */, meta[relay.Constant][141] /* ty=Tensor[(32), float32] span=std.constant15_dequant.scale__249:0:0 */, meta[relay.Constant][142] /* ty=Tensor[(32), int32] span=std.constant15_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32, 192, 1, 1), float32] span=std.constant15_dequant:0:0 */;
  %233 = qnn.dequantize(meta[relay.Constant][143] /* ty=Tensor[(32), int32] span=std.constant59_dequant.std.constant59:0:0 */, meta[relay.Constant][144] /* ty=Tensor[(32), float32] span=std.constant59_dequant.scale__153:0:0 */, meta[relay.Constant][145] /* ty=Tensor[(32), int32] span=std.constant59_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32), float32] span=std.constant59_dequant:0:0 */;
  %234 = expand_dims(%233, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %235 = nn.conv2d(%231, %232, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 65, 65), float32] span=tfl.conv_2d15_prequant:0:0 */;
  %236 = expand_dims(%234, axis=0) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %237 = add(%235, %236) /* ty=Tensor[(1, 32, 65, 65), float32] */;
  %238 = qnn.quantize(%237, 0.158741f /* ty=float32 span=tfl.conv_2d15_quantize.scale__601:0:0 */, -12 /* ty=int32 span=tfl.conv_2d15_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 32, 65, 65), int8] span=tfl.conv_2d15_quantize:0:0 */;
  %239 = qnn.dequantize(%238, 0.158741f /* ty=float32 span=tfl.conv_2d15_quantize.scale__601:0:0 */, -12 /* ty=int32 span=tfl.conv_2d15_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 32, 65, 65), float32] span=tfl.conv_2d15_dequant:0:0 */;
  %240 = add(%239, %193) /* ty=Tensor[(1, 32, 65, 65), float32] span=MobilenetV2/expanded_conv_7/add_prequant:0:0 */;
  %241 = qnn.quantize(%240, 0.196705f /* ty=float32 span=MobilenetV2/expanded_conv_7/add_quantize.scale__607:0:0 */, -16 /* ty=int32 span=MobilenetV2/expanded_conv_7/add_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 32, 65, 65), int8] span=MobilenetV2/expanded_conv_7/add_quantize:0:0 */;
  %242 = qnn.dequantize(%241, 0.196705f /* ty=float32 span=MobilenetV2/expanded_conv_7/add_quantize.scale__607:0:0 */, -16 /* ty=int32 span=tfl.conv_2d16_prequant__609_DequantizeLinear__1409:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 32, 65, 65), float32] span=tfl.conv_2d16_prequant__609_DequantizeLinear__1409:0:0 */;
  %243 = qnn.dequantize(meta[relay.Constant][146] /* ty=Tensor[(192, 32, 1, 1), int8] span=std.constant16_dequant.std.constant16:0:0 */, meta[relay.Constant][147] /* ty=Tensor[(192), float32] span=std.constant16_dequant.scale__247:0:0 */, meta[relay.Constant][148] /* ty=Tensor[(192), int32] span=std.constant16_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192, 32, 1, 1), float32] span=std.constant16_dequant:0:0 */;
  %244 = qnn.dequantize(meta[relay.Constant][149] /* ty=Tensor[(192), int32] span=std.constant60_dequant.std.constant60:0:0 */, meta[relay.Constant][150] /* ty=Tensor[(192), float32] span=std.constant60_dequant.scale__149:0:0 */, meta[relay.Constant][151] /* ty=Tensor[(192), int32] span=std.constant60_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=std.constant60_dequant:0:0 */;
  %245 = expand_dims(%244, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %246 = nn.conv2d(%242, %243, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 65, 65), float32] span=tfl.conv_2d16_prequant:0:0 */;
  %247 = expand_dims(%245, axis=0) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %248 = add(%246, %247) /* ty=Tensor[(1, 192, 65, 65), float32] */;
  %249 = clip(%248, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 65, 65), float32] span=Relu6__45:0:0 */;
  %250 = qnn.quantize(%249, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d16_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 192, 65, 65), int8] span=tfl.conv_2d16_quantize:0:0 */;
  %251 = qnn.dequantize(%250, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d16_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 192, 65, 65), float32] span=tfl.conv_2d16_dequant:0:0 */;
  %252 = nn.pad(%251, 0f /* ty=float32 span=Pad__621:0:0 */, pad_width=[[0i64, 0i64], [0i64, 0i64], [2i64, 3i64], [2i64, 3i64]]) /* ty=Tensor[(1, 192, 70, 70), float32] span=Pad__621:0:0 */;
  %253 = reshape(%252, newshape=[192, 1, 70, 70]) /* ty=Tensor[(192, 1, 70, 70), float32] span=Transpose__619:0:0 */;
  %254 = nn.space_to_depth(%253, block_size=2, mode="") /* ty=Tensor[(192, 4, 35, 35), float32] span=SpaceToDepth__622:0:0 */;
  %255 = qnn.quantize(%254, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_8/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(192, 4, 35, 35), int8] span=MobilenetV2/expanded_conv_8/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */;
  %256 = transpose(%255, axes=[1, 0, 2, 3]) /* ty=Tensor[(4, 192, 35, 35), int8] span=MobilenetV2/expanded_conv_8/depthwise/depthwise1_prequant__628:0:0 */;
  %257 = qnn.dequantize(%256, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_8/depthwise/depthwise1_prequant__628_DequantizeLinear__1498:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(4, 192, 35, 35), float32] span=MobilenetV2/expanded_conv_8/depthwise/depthwise1_prequant__628_DequantizeLinear__1498:0:0 */;
  %258 = qnn.dequantize(meta[relay.Constant][152] /* ty=Tensor[(192, 1, 3, 3), int8] span=MobilenetV2/expanded_conv_8/depthwise/depthwise_dequant.MobilenetV2/expanded_conv_8/depthwise/depthwise:0:0 */, meta[relay.Constant][153] /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_8/depthwise/depthwise_dequant.scale__282:0:0 */, meta[relay.Constant][154] /* ty=Tensor[(192), int32] span=MobilenetV2/expanded_conv_8/depthwise/depthwise_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192, 1, 3, 3), float32] span=MobilenetV2/expanded_conv_8/depthwise/depthwise_dequant:0:0 */;
  %259 = expand_dims(%210, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %260 = nn.conv2d(%257, %258, padding=[0, 0, 0, 0], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(4, 192, 33, 33), float32] span=MobilenetV2/expanded_conv_8/depthwise/depthwise1_prequant:0:0 */;
  %261 = expand_dims(%259, axis=0) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %262 = add(%260, %261) /* ty=Tensor[(4, 192, 33, 33), float32] */;
  %263 = qnn.quantize(%262, 0.132122f /* ty=float32 span=MobilenetV2/expanded_conv_8/depthwise/depthwise1_quantize.scale__647:0:0 */, 9 /* ty=int32 span=MobilenetV2/expanded_conv_8/depthwise/depthwise1_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(4, 192, 33, 33), int8] span=MobilenetV2/expanded_conv_8/depthwise/depthwise1_quantize:0:0 */;
  %264 = transpose(%263, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 4, 33, 33), int8] span=Transpose__638:0:0 */;
  %265 = nn.depth_to_space(%264, block_size=2) /* ty=Tensor[(192, 1, 66, 66), int8] span=DepthToSpace__639:0:0 */;
  %266 = strided_slice(%265, begin=[0i64, 0i64], end=[-1i64, -1i64], strides=[1i64, 1i64], axes=[2i64, 3i64]) /* ty=Tensor[(192, 1, 65, 65), int8] span=Slice__643:0:0 */;
  %267 = reshape(%266, newshape=[1, 192, 65, 65]) /* ty=Tensor[(1, 192, 65, 65), int8] span=Transpose__644:0:0 */;
  %268 = transpose(%267, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 65, 65, 192), int8] span=MobilenetV2/expanded_conv_8/depthwise/depthwise/BatchToSpaceND_prequant:0:0 */;
  %269 = qnn.dequantize(%268, 0.132122f /* ty=float32 span=MobilenetV2/expanded_conv_8/depthwise/depthwise1_quantize.scale__647:0:0 */, 9 /* ty=int32 span=MobilenetV2/expanded_conv_8/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1514:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 192), float32] span=MobilenetV2/expanded_conv_8/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1514:0:0 */;
  %270 = qnn.dequantize(meta[relay.Constant][155] /* ty=Tensor[(192), int8] span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm1_dequant.MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm1:0:0 */, 0.0419824f /* ty=float32 span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm1_dequant.scale__284:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */;
  %271 = multiply(%269, %270) /* ty=Tensor[(1, 65, 65, 192), float32] span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm2_prequant:0:0 */;
  %272 = qnn.quantize(%271, 0.228757f /* ty=float32 span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__651:0:0 */, -29 /* ty=int32 span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 192), int8] span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */;
  %273 = qnn.dequantize(%272, 0.228757f /* ty=float32 span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__651:0:0 */, -29 /* ty=int32 span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 192), float32] span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */;
  %274 = qnn.dequantize(meta[relay.Constant][156] /* ty=Tensor[(192), int8] span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm:0:0 */, 0.195256f /* ty=float32 span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__286:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %275 = add(%273, %274) /* ty=Tensor[(1, 65, 65, 192), float32] span=tfl.add1_prequant:0:0 */;
  %276 = clip(%275, a_min=0f, a_max=6f) /* ty=Tensor[(1, 65, 65, 192), float32] span=Relu6__48:0:0 */;
  %277 = qnn.quantize(%276, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.add1_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 192), int8] span=tfl.add1_quantize:0:0 */;
  %278 = transpose(%277, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 192, 65, 65), int8] span=tfl.conv_2d17_prequant__659:0:0 */;
  %279 = qnn.dequantize(%278, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d17_prequant__659_DequantizeLinear__1310:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 192, 65, 65), float32] span=tfl.conv_2d17_prequant__659_DequantizeLinear__1310:0:0 */;
  %280 = qnn.dequantize(meta[relay.Constant][157] /* ty=Tensor[(32, 192, 1, 1), int8] span=std.constant17_dequant.std.constant17:0:0 */, meta[relay.Constant][158] /* ty=Tensor[(32), float32] span=std.constant17_dequant.scale__245:0:0 */, meta[relay.Constant][159] /* ty=Tensor[(32), int32] span=std.constant17_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32, 192, 1, 1), float32] span=std.constant17_dequant:0:0 */;
  %281 = qnn.dequantize(meta[relay.Constant][160] /* ty=Tensor[(32), int32] span=std.constant61_dequant.std.constant61:0:0 */, meta[relay.Constant][161] /* ty=Tensor[(32), float32] span=std.constant61_dequant.scale__147:0:0 */, meta[relay.Constant][162] /* ty=Tensor[(32), int32] span=std.constant61_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32), float32] span=std.constant61_dequant:0:0 */;
  %282 = expand_dims(%281, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %283 = nn.conv2d(%279, %280, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 65, 65), float32] span=tfl.conv_2d17_prequant:0:0 */;
  %284 = expand_dims(%282, axis=0) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %285 = add(%283, %284) /* ty=Tensor[(1, 32, 65, 65), float32] */;
  %286 = qnn.quantize(%285, 0.159925f /* ty=float32 span=tfl.conv_2d17_quantize.scale__664:0:0 */, -13 /* ty=int32 span=tfl.conv_2d17_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 32, 65, 65), int8] span=tfl.conv_2d17_quantize:0:0 */;
  %287 = qnn.dequantize(%286, 0.159925f /* ty=float32 span=tfl.conv_2d17_quantize.scale__664:0:0 */, -13 /* ty=int32 span=tfl.conv_2d17_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 32, 65, 65), float32] span=tfl.conv_2d17_dequant:0:0 */;
  %288 = add(%287, %242) /* ty=Tensor[(1, 32, 65, 65), float32] span=MobilenetV2/expanded_conv_8/add_prequant:0:0 */;
  %289 = qnn.quantize(%288, 0.219266f /* ty=float32 span=MobilenetV2/expanded_conv_8/add_quantize.scale__668:0:0 */, -10 /* ty=int32 span=MobilenetV2/expanded_conv_8/add_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 32, 65, 65), int8] span=MobilenetV2/expanded_conv_8/add_quantize:0:0 */;
  %290 = qnn.dequantize(%289, 0.219266f /* ty=float32 span=MobilenetV2/expanded_conv_8/add_quantize.scale__668:0:0 */, -10 /* ty=int32 span=tfl.conv_2d18_prequant__670_DequantizeLinear__1446:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 32, 65, 65), float32] span=tfl.conv_2d18_prequant__670_DequantizeLinear__1446:0:0 */;
  %291 = qnn.dequantize(meta[relay.Constant][163] /* ty=Tensor[(192, 32, 1, 1), int8] span=std.constant18_dequant.std.constant18:0:0 */, meta[relay.Constant][164] /* ty=Tensor[(192), float32] span=std.constant18_dequant.scale__243:0:0 */, meta[relay.Constant][165] /* ty=Tensor[(192), int32] span=std.constant18_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192, 32, 1, 1), float32] span=std.constant18_dequant:0:0 */;
  %292 = qnn.dequantize(meta[relay.Constant][166] /* ty=Tensor[(192), int32] span=std.constant62_dequant.std.constant62:0:0 */, meta[relay.Constant][167] /* ty=Tensor[(192), float32] span=std.constant62_dequant.scale__145:0:0 */, meta[relay.Constant][168] /* ty=Tensor[(192), int32] span=std.constant62_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=std.constant62_dequant:0:0 */;
  %293 = expand_dims(%292, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %294 = nn.conv2d(%290, %291, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 65, 65), float32] span=tfl.conv_2d18_prequant:0:0 */;
  %295 = expand_dims(%293, axis=0) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %296 = add(%294, %295) /* ty=Tensor[(1, 192, 65, 65), float32] */;
  %297 = clip(%296, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 65, 65), float32] span=Relu6__50:0:0 */;
  %298 = qnn.quantize(%297, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d18_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 192, 65, 65), int8] span=tfl.conv_2d18_quantize:0:0 */;
  %299 = qnn.dequantize(%298, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d18_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 192, 65, 65), float32] span=tfl.conv_2d18_dequant:0:0 */;
  %300 = nn.pad(%299, 0f /* ty=float32 span=Pad__682:0:0 */, pad_width=[[0i64, 0i64], [0i64, 0i64], [2i64, 3i64], [2i64, 3i64]]) /* ty=Tensor[(1, 192, 70, 70), float32] span=Pad__682:0:0 */;
  %301 = reshape(%300, newshape=[192, 1, 70, 70]) /* ty=Tensor[(192, 1, 70, 70), float32] span=Transpose__680:0:0 */;
  %302 = nn.space_to_depth(%301, block_size=2, mode="") /* ty=Tensor[(192, 4, 35, 35), float32] span=SpaceToDepth__683:0:0 */;
  %303 = qnn.quantize(%302, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_9/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(192, 4, 35, 35), int8] span=MobilenetV2/expanded_conv_9/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */;
  %304 = transpose(%303, axes=[1, 0, 2, 3]) /* ty=Tensor[(4, 192, 35, 35), int8] span=MobilenetV2/expanded_conv_9/depthwise/depthwise1_prequant__689:0:0 */;
  %305 = qnn.dequantize(%304, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_9/depthwise/depthwise1_prequant__689_DequantizeLinear__1494:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(4, 192, 35, 35), float32] span=MobilenetV2/expanded_conv_9/depthwise/depthwise1_prequant__689_DequantizeLinear__1494:0:0 */;
  %306 = qnn.dequantize(meta[relay.Constant][169] /* ty=Tensor[(192, 1, 3, 3), int8] span=MobilenetV2/expanded_conv_9/depthwise/depthwise_dequant.MobilenetV2/expanded_conv_9/depthwise/depthwise:0:0 */, meta[relay.Constant][170] /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_9/depthwise/depthwise_dequant.scale__276:0:0 */, meta[relay.Constant][171] /* ty=Tensor[(192), int32] span=MobilenetV2/expanded_conv_9/depthwise/depthwise_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192, 1, 3, 3), float32] span=MobilenetV2/expanded_conv_9/depthwise/depthwise_dequant:0:0 */;
  %307 = expand_dims(%210, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %308 = nn.conv2d(%305, %306, padding=[0, 0, 0, 0], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(4, 192, 33, 33), float32] span=MobilenetV2/expanded_conv_9/depthwise/depthwise1_prequant:0:0 */;
  %309 = expand_dims(%307, axis=0) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %310 = add(%308, %309) /* ty=Tensor[(4, 192, 33, 33), float32] */;
  %311 = qnn.quantize(%310, 0.112401f /* ty=float32 span=MobilenetV2/expanded_conv_9/depthwise/depthwise1_quantize.scale__708:0:0 */, 11 /* ty=int32 span=MobilenetV2/expanded_conv_9/depthwise/depthwise1_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(4, 192, 33, 33), int8] span=MobilenetV2/expanded_conv_9/depthwise/depthwise1_quantize:0:0 */;
  %312 = transpose(%311, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 4, 33, 33), int8] span=Transpose__699:0:0 */;
  %313 = nn.depth_to_space(%312, block_size=2) /* ty=Tensor[(192, 1, 66, 66), int8] span=DepthToSpace__700:0:0 */;
  %314 = strided_slice(%313, begin=[0i64, 0i64], end=[-1i64, -1i64], strides=[1i64, 1i64], axes=[2i64, 3i64]) /* ty=Tensor[(192, 1, 65, 65), int8] span=Slice__704:0:0 */;
  %315 = reshape(%314, newshape=[1, 192, 65, 65]) /* ty=Tensor[(1, 192, 65, 65), int8] span=Transpose__705:0:0 */;
  %316 = transpose(%315, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 65, 65, 192), int8] span=MobilenetV2/expanded_conv_9/depthwise/depthwise/BatchToSpaceND_prequant:0:0 */;
  %317 = qnn.dequantize(%316, 0.112401f /* ty=float32 span=MobilenetV2/expanded_conv_9/depthwise/depthwise1_quantize.scale__708:0:0 */, 11 /* ty=int32 span=MobilenetV2/expanded_conv_9/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1511:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 192), float32] span=MobilenetV2/expanded_conv_9/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1511:0:0 */;
  %318 = qnn.dequantize(meta[relay.Constant][172] /* ty=Tensor[(192), int8] span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm1_dequant.MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm1:0:0 */, 0.0273417f /* ty=float32 span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm1_dequant.scale__278:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */;
  %319 = multiply(%317, %318) /* ty=Tensor[(1, 65, 65, 192), float32] span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm2_prequant:0:0 */;
  %320 = qnn.quantize(%319, 0.0887487f /* ty=float32 span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__712:0:0 */, 7 /* ty=int32 span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 192), int8] span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */;
  %321 = qnn.dequantize(%320, 0.0887487f /* ty=float32 span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__712:0:0 */, 7 /* ty=int32 span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 192), float32] span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */;
  %322 = qnn.dequantize(meta[relay.Constant][173] /* ty=Tensor[(192), int8] span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm:0:0 */, 0.0501968f /* ty=float32 span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__280:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %323 = add(%321, %322) /* ty=Tensor[(1, 65, 65, 192), float32] span=tfl.add2_prequant:0:0 */;
  %324 = clip(%323, a_min=0f, a_max=6f) /* ty=Tensor[(1, 65, 65, 192), float32] span=Relu6__53:0:0 */;
  %325 = qnn.quantize(%324, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.add2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 192), int8] span=tfl.add2_quantize:0:0 */;
  %326 = transpose(%325, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 192, 65, 65), int8] span=tfl.conv_2d19_prequant__720:0:0 */;
  %327 = qnn.dequantize(%326, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d19_prequant__720_DequantizeLinear__1379:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 192, 65, 65), float32] span=tfl.conv_2d19_prequant__720_DequantizeLinear__1379:0:0 */;
  %328 = qnn.dequantize(meta[relay.Constant][174] /* ty=Tensor[(32, 192, 1, 1), int8] span=std.constant19_dequant.std.constant19:0:0 */, meta[relay.Constant][175] /* ty=Tensor[(32), float32] span=std.constant19_dequant.scale__241:0:0 */, meta[relay.Constant][176] /* ty=Tensor[(32), int32] span=std.constant19_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32, 192, 1, 1), float32] span=std.constant19_dequant:0:0 */;
  %329 = qnn.dequantize(meta[relay.Constant][177] /* ty=Tensor[(32), int32] span=std.constant63_dequant.std.constant63:0:0 */, meta[relay.Constant][178] /* ty=Tensor[(32), float32] span=std.constant63_dequant.scale__143:0:0 */, meta[relay.Constant][179] /* ty=Tensor[(32), int32] span=std.constant63_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(32), float32] span=std.constant63_dequant:0:0 */;
  %330 = expand_dims(%329, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %331 = nn.conv2d(%327, %328, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 65, 65), float32] span=tfl.conv_2d19_prequant:0:0 */;
  %332 = expand_dims(%330, axis=0) /* ty=Tensor[(1, 32, 1, 1), float32] */;
  %333 = add(%331, %332) /* ty=Tensor[(1, 32, 65, 65), float32] */;
  %334 = qnn.quantize(%333, 0.137552f /* ty=float32 span=tfl.conv_2d19_quantize.scale__725:0:0 */, 4 /* ty=int32 span=tfl.conv_2d19_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 32, 65, 65), int8] span=tfl.conv_2d19_quantize:0:0 */;
  %335 = qnn.dequantize(%334, 0.137552f /* ty=float32 span=tfl.conv_2d19_quantize.scale__725:0:0 */, 4 /* ty=int32 span=tfl.conv_2d19_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 32, 65, 65), float32] span=tfl.conv_2d19_dequant:0:0 */;
  %336 = add(%335, %290) /* ty=Tensor[(1, 32, 65, 65), float32] span=MobilenetV2/expanded_conv_9/add_prequant:0:0 */;
  %337 = qnn.quantize(%336, 0.202087f /* ty=float32 span=MobilenetV2/expanded_conv_9/add_quantize.scale__729:0:0 */, -2 /* ty=int32 span=MobilenetV2/expanded_conv_9/add_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 32, 65, 65), int8] span=MobilenetV2/expanded_conv_9/add_quantize:0:0 */;
  %338 = qnn.dequantize(%337, 0.202087f /* ty=float32 span=MobilenetV2/expanded_conv_9/add_quantize.scale__729:0:0 */, -2 /* ty=int32 span=tfl.conv_2d20_prequant__731_DequantizeLinear__1424:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 32, 65, 65), float32] span=tfl.conv_2d20_prequant__731_DequantizeLinear__1424:0:0 */;
  %339 = qnn.dequantize(meta[relay.Constant][180] /* ty=Tensor[(192, 32, 1, 1), int8] span=std.constant20_dequant.std.constant20:0:0 */, meta[relay.Constant][181] /* ty=Tensor[(192), float32] span=std.constant20_dequant.scale__237:0:0 */, meta[relay.Constant][182] /* ty=Tensor[(192), int32] span=std.constant20_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192, 32, 1, 1), float32] span=std.constant20_dequant:0:0 */;
  %340 = qnn.dequantize(meta[relay.Constant][183] /* ty=Tensor[(192), int32] span=std.constant64_dequant.std.constant64:0:0 */, meta[relay.Constant][184] /* ty=Tensor[(192), float32] span=std.constant64_dequant.scale__141:0:0 */, meta[relay.Constant][185] /* ty=Tensor[(192), int32] span=std.constant64_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=std.constant64_dequant:0:0 */;
  %341 = expand_dims(%340, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %342 = nn.conv2d(%338, %339, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 65, 65), float32] span=tfl.conv_2d20_prequant:0:0 */;
  %343 = expand_dims(%341, axis=0) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %344 = add(%342, %343) /* ty=Tensor[(1, 192, 65, 65), float32] */;
  %345 = clip(%344, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 65, 65), float32] span=Relu6__55:0:0 */;
  %346 = qnn.quantize(%345, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d20_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 192, 65, 65), int8] span=tfl.conv_2d20_quantize:0:0 */;
  %347 = qnn.dequantize(%346, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d20_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 192, 65, 65), float32] span=tfl.conv_2d20_dequant:0:0 */;
  %348 = nn.pad(%347, 0f /* ty=float32 span=Pad__743:0:0 */, pad_width=[[0i64, 0i64], [0i64, 0i64], [2i64, 3i64], [2i64, 3i64]]) /* ty=Tensor[(1, 192, 70, 70), float32] span=Pad__743:0:0 */;
  %349 = reshape(%348, newshape=[192, 1, 70, 70]) /* ty=Tensor[(192, 1, 70, 70), float32] span=Transpose__741:0:0 */;
  %350 = nn.space_to_depth(%349, block_size=2, mode="") /* ty=Tensor[(192, 4, 35, 35), float32] span=SpaceToDepth__744:0:0 */;
  %351 = qnn.quantize(%350, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_10/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(192, 4, 35, 35), int8] span=MobilenetV2/expanded_conv_10/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */;
  %352 = transpose(%351, axes=[1, 0, 2, 3]) /* ty=Tensor[(4, 192, 35, 35), int8] span=MobilenetV2/expanded_conv_10/depthwise/depthwise2_prequant__750:0:0 */;
  %353 = qnn.dequantize(%352, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_10/depthwise/depthwise2_prequant__750_DequantizeLinear__1495:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(4, 192, 35, 35), float32] span=MobilenetV2/expanded_conv_10/depthwise/depthwise2_prequant__750_DequantizeLinear__1495:0:0 */;
  %354 = qnn.dequantize(meta[relay.Constant][186] /* ty=Tensor[(192, 1, 3, 3), int8] span=MobilenetV2/expanded_conv_10/depthwise/depthwise1_dequant.MobilenetV2/expanded_conv_10/depthwise/depthwise1:0:0 */, meta[relay.Constant][187] /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_10/depthwise/depthwise1_dequant.scale__344:0:0 */, meta[relay.Constant][188] /* ty=Tensor[(192), int32] span=MobilenetV2/expanded_conv_10/depthwise/depthwise1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192, 1, 3, 3), float32] span=MobilenetV2/expanded_conv_10/depthwise/depthwise1_dequant:0:0 */;
  %355 = expand_dims(%210, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %356 = nn.conv2d(%353, %354, padding=[0, 0, 0, 0], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(4, 192, 33, 33), float32] span=MobilenetV2/expanded_conv_10/depthwise/depthwise2_prequant:0:0 */;
  %357 = expand_dims(%355, axis=0) /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %358 = add(%356, %357) /* ty=Tensor[(4, 192, 33, 33), float32] */;
  %359 = qnn.quantize(%358, 0.239073f /* ty=float32 span=MobilenetV2/expanded_conv_10/depthwise/depthwise2_quantize.scale__769:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_10/depthwise/depthwise2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(4, 192, 33, 33), int8] span=MobilenetV2/expanded_conv_10/depthwise/depthwise2_quantize:0:0 */;
  %360 = transpose(%359, axes=[1, 0, 2, 3]) /* ty=Tensor[(192, 4, 33, 33), int8] span=Transpose__760:0:0 */;
  %361 = nn.depth_to_space(%360, block_size=2) /* ty=Tensor[(192, 1, 66, 66), int8] span=DepthToSpace__761:0:0 */;
  %362 = strided_slice(%361, begin=[0i64, 0i64], end=[-1i64, -1i64], strides=[1i64, 1i64], axes=[2i64, 3i64]) /* ty=Tensor[(192, 1, 65, 65), int8] span=Slice__765:0:0 */;
  %363 = reshape(%362, newshape=[1, 192, 65, 65]) /* ty=Tensor[(1, 192, 65, 65), int8] span=Transpose__766:0:0 */;
  %364 = transpose(%363, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 65, 65, 192), int8] span=MobilenetV2/expanded_conv_10/depthwise/depthwise/BatchToSpaceND_prequant:0:0 */;
  %365 = qnn.dequantize(%364, 0.239073f /* ty=float32 span=MobilenetV2/expanded_conv_10/depthwise/depthwise2_quantize.scale__769:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_10/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1512:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 192), float32] span=MobilenetV2/expanded_conv_10/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1512:0:0 */;
  %366 = qnn.dequantize(meta[relay.Constant][189] /* ty=Tensor[(192), int8] span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm1_dequant.MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm1:0:0 */, 0.0117123f /* ty=float32 span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm1_dequant.scale__348:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */;
  %367 = multiply(%365, %366) /* ty=Tensor[(1, 65, 65, 192), float32] span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm2_prequant:0:0 */;
  %368 = qnn.quantize(%367, 0.0902775f /* ty=float32 span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__773:0:0 */, 32 /* ty=int32 span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 192), int8] span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */;
  %369 = qnn.dequantize(%368, 0.0902775f /* ty=float32 span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__773:0:0 */, 32 /* ty=int32 span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 192), float32] span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */;
  %370 = qnn.dequantize(meta[relay.Constant][190] /* ty=Tensor[(192), int8] span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm:0:0 */, 0.0818258f /* ty=float32 span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__350:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(192), float32] span=MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %371 = add(%369, %370) /* ty=Tensor[(1, 65, 65, 192), float32] span=tfl.add3_prequant:0:0 */;
  %372 = clip(%371, a_min=0f, a_max=6f) /* ty=Tensor[(1, 65, 65, 192), float32] span=Relu6__58:0:0 */;
  %373 = qnn.quantize(%372, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.add3_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 192), int8] span=tfl.add3_quantize:0:0 */;
  %374 = transpose(%373, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 192, 65, 65), int8] span=tfl.conv_2d21_prequant__781:0:0 */;
  %375 = qnn.dequantize(%374, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d21_prequant__781_DequantizeLinear__1318:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 192, 65, 65), float32] span=tfl.conv_2d21_prequant__781_DequantizeLinear__1318:0:0 */;
  %376 = qnn.dequantize(meta[relay.Constant][191] /* ty=Tensor[(48, 192, 1, 1), int8] span=std.constant21_dequant.std.constant21:0:0 */, meta[relay.Constant][192] /* ty=Tensor[(48), float32] span=std.constant21_dequant.scale__235:0:0 */, meta[relay.Constant][193] /* ty=Tensor[(48), int32] span=std.constant21_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(48, 192, 1, 1), float32] span=std.constant21_dequant:0:0 */;
  %377 = qnn.dequantize(meta[relay.Constant][194] /* ty=Tensor[(48), int32] span=std.constant65_dequant.std.constant65:0:0 */, meta[relay.Constant][195] /* ty=Tensor[(48), float32] span=std.constant65_dequant.scale__139:0:0 */, meta[relay.Constant][196] /* ty=Tensor[(48), int32] span=std.constant65_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(48), float32] span=std.constant65_dequant:0:0 */;
  %378 = expand_dims(%377, axis=1, num_newaxis=2) /* ty=Tensor[(48, 1, 1), float32] */;
  %379 = nn.conv2d(%375, %376, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 65, 65), float32] span=tfl.conv_2d21_prequant:0:0 */;
  %380 = expand_dims(%378, axis=0) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %381 = add(%379, %380) /* ty=Tensor[(1, 48, 65, 65), float32] */;
  %382 = qnn.quantize(%381, 0.131199f /* ty=float32 span=tfl.conv_2d21_quantize.scale__786:0:0 */, -16 /* ty=int32 span=tfl.conv_2d21_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 48, 65, 65), int8] span=tfl.conv_2d21_quantize:0:0 */;
  %383 = qnn.dequantize(%382, 0.131199f /* ty=float32 span=tfl.conv_2d21_quantize.scale__786:0:0 */, -16 /* ty=int32 span=tfl.conv_2d21_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 48, 65, 65), float32] span=tfl.conv_2d21_dequant:0:0 */;
  %384 = qnn.dequantize(meta[relay.Constant][197] /* ty=Tensor[(288, 48, 1, 1), int8] span=std.constant22_dequant.std.constant22:0:0 */, meta[relay.Constant][198] /* ty=Tensor[(288), float32] span=std.constant22_dequant.scale__233:0:0 */, meta[relay.Constant][199] /* ty=Tensor[(288), int32] span=std.constant22_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288, 48, 1, 1), float32] span=std.constant22_dequant:0:0 */;
  %385 = qnn.dequantize(meta[relay.Constant][200] /* ty=Tensor[(288), int32] span=std.constant66_dequant.std.constant66:0:0 */, meta[relay.Constant][201] /* ty=Tensor[(288), float32] span=std.constant66_dequant.scale__137:0:0 */, meta[relay.Constant][202] /* ty=Tensor[(288), int32] span=std.constant66_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288), float32] span=std.constant66_dequant:0:0 */;
  %386 = expand_dims(%385, axis=1, num_newaxis=2) /* ty=Tensor[(288, 1, 1), float32] */;
  %387 = nn.conv2d(%383, %384, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, 65, 65), float32] span=tfl.conv_2d22_prequant:0:0 */;
  %388 = expand_dims(%386, axis=0) /* ty=Tensor[(1, 288, 1, 1), float32] */;
  %389 = add(%387, %388) /* ty=Tensor[(1, 288, 65, 65), float32] */;
  %390 = clip(%389, a_min=0f, a_max=6f) /* ty=Tensor[(1, 288, 65, 65), float32] span=Relu6__60:0:0 */;
  %391 = qnn.quantize(%390, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d22_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 288, 65, 65), int8] span=tfl.conv_2d22_quantize:0:0 */;
  %392 = qnn.dequantize(%391, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d22_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 288, 65, 65), float32] span=tfl.conv_2d22_dequant:0:0 */;
  %393 = nn.pad(%392, 0f /* ty=float32 span=Pad__800:0:0 */, pad_width=[[0i64, 0i64], [0i64, 0i64], [2i64, 3i64], [2i64, 3i64]]) /* ty=Tensor[(1, 288, 70, 70), float32] span=Pad__800:0:0 */;
  %394 = reshape(%393, newshape=[288, 1, 70, 70]) /* ty=Tensor[(288, 1, 70, 70), float32] span=Transpose__798:0:0 */;
  %395 = nn.space_to_depth(%394, block_size=2, mode="") /* ty=Tensor[(288, 4, 35, 35), float32] span=SpaceToDepth__801:0:0 */;
  %396 = qnn.quantize(%395, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_11/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(288, 4, 35, 35), int8] span=MobilenetV2/expanded_conv_11/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */;
  %397 = transpose(%396, axes=[1, 0, 2, 3]) /* ty=Tensor[(4, 288, 35, 35), int8] span=MobilenetV2/expanded_conv_11/depthwise/depthwise1_prequant__807:0:0 */;
  %398 = qnn.dequantize(%397, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_11/depthwise/depthwise1_prequant__807_DequantizeLinear__1483:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(4, 288, 35, 35), float32] span=MobilenetV2/expanded_conv_11/depthwise/depthwise1_prequant__807_DequantizeLinear__1483:0:0 */;
  %399 = qnn.dequantize(meta[relay.Constant][203] /* ty=Tensor[(288, 1, 3, 3), int8] span=MobilenetV2/expanded_conv_11/depthwise/depthwise_dequant.MobilenetV2/expanded_conv_11/depthwise/depthwise:0:0 */, meta[relay.Constant][204] /* ty=Tensor[(288), float32] span=MobilenetV2/expanded_conv_11/depthwise/depthwise_dequant.scale__338:0:0 */, meta[relay.Constant][205] /* ty=Tensor[(288), int32] span=MobilenetV2/expanded_conv_11/depthwise/depthwise_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288, 1, 3, 3), float32] span=MobilenetV2/expanded_conv_11/depthwise/depthwise_dequant:0:0 */;
  %400 = qnn.dequantize(meta[relay.Constant][206] /* ty=Tensor[(288), int32] span=std.constant66_dequant.zero_point__327:0:0 */, meta[relay.Constant][207] /* ty=Tensor[(288), float32] span=MobilenetV2/expanded_conv_13/depthwise/depthwise_dequant.scale__326:0:0 */, meta[relay.Constant][208] /* ty=Tensor[(288), int32] span=MobilenetV2/expanded_conv_13/depthwise/depthwise_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288), float32] span=MobilenetV2/expanded_conv_13/depthwise/depthwise_dequant:0:0 */;
  %401 = expand_dims(%400, axis=1, num_newaxis=2) /* ty=Tensor[(288, 1, 1), float32] */;
  %402 = nn.conv2d(%398, %399, padding=[0, 0, 0, 0], groups=288, channels=288, kernel_size=[3, 3]) /* ty=Tensor[(4, 288, 33, 33), float32] span=MobilenetV2/expanded_conv_11/depthwise/depthwise1_prequant:0:0 */;
  %403 = expand_dims(%401, axis=0) /* ty=Tensor[(1, 288, 1, 1), float32] */;
  %404 = add(%402, %403) /* ty=Tensor[(4, 288, 33, 33), float32] */;
  %405 = qnn.quantize(%404, 0.101994f /* ty=float32 span=MobilenetV2/expanded_conv_11/depthwise/depthwise1_quantize.scale__826:0:0 */, 4 /* ty=int32 span=MobilenetV2/expanded_conv_11/depthwise/depthwise1_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(4, 288, 33, 33), int8] span=MobilenetV2/expanded_conv_11/depthwise/depthwise1_quantize:0:0 */;
  %406 = transpose(%405, axes=[1, 0, 2, 3]) /* ty=Tensor[(288, 4, 33, 33), int8] span=Transpose__817:0:0 */;
  %407 = nn.depth_to_space(%406, block_size=2) /* ty=Tensor[(288, 1, 66, 66), int8] span=DepthToSpace__818:0:0 */;
  %408 = strided_slice(%407, begin=[0i64, 0i64], end=[-1i64, -1i64], strides=[1i64, 1i64], axes=[2i64, 3i64]) /* ty=Tensor[(288, 1, 65, 65), int8] span=Slice__822:0:0 */;
  %409 = reshape(%408, newshape=[1, 288, 65, 65]) /* ty=Tensor[(1, 288, 65, 65), int8] span=Transpose__823:0:0 */;
  %410 = transpose(%409, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 65, 65, 288), int8] span=MobilenetV2/expanded_conv_11/depthwise/depthwise/BatchToSpaceND_prequant:0:0 */;
  %411 = qnn.dequantize(%410, 0.101994f /* ty=float32 span=MobilenetV2/expanded_conv_11/depthwise/depthwise1_quantize.scale__826:0:0 */, 4 /* ty=int32 span=MobilenetV2/expanded_conv_11/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1515:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 288), float32] span=MobilenetV2/expanded_conv_11/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1515:0:0 */;
  %412 = qnn.dequantize(meta[relay.Constant][209] /* ty=Tensor[(288), int8] span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm1_dequant.MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm1:0:0 */, 0.171542f /* ty=float32 span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm1_dequant.scale__340:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288), float32] span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */;
  %413 = multiply(%411, %412) /* ty=Tensor[(1, 65, 65, 288), float32] span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm2_prequant:0:0 */;
  %414 = qnn.quantize(%413, 0.187531f /* ty=float32 span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__828:0:0 */, -63 /* ty=int32 span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 288), int8] span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */;
  %415 = qnn.dequantize(%414, 0.187531f /* ty=float32 span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__828:0:0 */, -63 /* ty=int32 span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 288), float32] span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */;
  %416 = qnn.dequantize(meta[relay.Constant][210] /* ty=Tensor[(288), int8] span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm:0:0 */, 0.19386f /* ty=float32 span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__342:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288), float32] span=MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %417 = add(%415, %416) /* ty=Tensor[(1, 65, 65, 288), float32] span=tfl.add4_prequant:0:0 */;
  %418 = clip(%417, a_min=0f, a_max=6f) /* ty=Tensor[(1, 65, 65, 288), float32] span=Relu6__63:0:0 */;
  %419 = qnn.quantize(%418, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.add4_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 288), int8] span=tfl.add4_quantize:0:0 */;
  %420 = transpose(%419, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 288, 65, 65), int8] span=tfl.conv_2d23_prequant__838:0:0 */;
  %421 = qnn.dequantize(%420, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d23_prequant__838_DequantizeLinear__1353:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 288, 65, 65), float32] span=tfl.conv_2d23_prequant__838_DequantizeLinear__1353:0:0 */;
  %422 = qnn.dequantize(meta[relay.Constant][211] /* ty=Tensor[(48, 288, 1, 1), int8] span=std.constant23_dequant.std.constant23:0:0 */, meta[relay.Constant][212] /* ty=Tensor[(48), float32] span=std.constant23_dequant.scale__231:0:0 */, meta[relay.Constant][213] /* ty=Tensor[(48), int32] span=std.constant23_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(48, 288, 1, 1), float32] span=std.constant23_dequant:0:0 */;
  %423 = qnn.dequantize(meta[relay.Constant][214] /* ty=Tensor[(48), int32] span=std.constant67_dequant.std.constant67:0:0 */, meta[relay.Constant][215] /* ty=Tensor[(48), float32] span=std.constant67_dequant.scale__135:0:0 */, meta[relay.Constant][216] /* ty=Tensor[(48), int32] span=std.constant67_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(48), float32] span=std.constant67_dequant:0:0 */;
  %424 = expand_dims(%423, axis=1, num_newaxis=2) /* ty=Tensor[(48, 1, 1), float32] */;
  %425 = nn.conv2d(%421, %422, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 65, 65), float32] span=tfl.conv_2d23_prequant:0:0 */;
  %426 = expand_dims(%424, axis=0) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %427 = add(%425, %426) /* ty=Tensor[(1, 48, 65, 65), float32] */;
  %428 = qnn.quantize(%427, 0.0927483f /* ty=float32 span=tfl.conv_2d23_quantize.scale__843:0:0 */, 4 /* ty=int32 span=tfl.conv_2d23_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 48, 65, 65), int8] span=tfl.conv_2d23_quantize:0:0 */;
  %429 = qnn.dequantize(%428, 0.0927483f /* ty=float32 span=tfl.conv_2d23_quantize.scale__843:0:0 */, 4 /* ty=int32 span=tfl.conv_2d23_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 48, 65, 65), float32] span=tfl.conv_2d23_dequant:0:0 */;
  %430 = add(%429, %383) /* ty=Tensor[(1, 48, 65, 65), float32] span=MobilenetV2/expanded_conv_11/add_prequant:0:0 */;
  %431 = qnn.quantize(%430, 0.140341f /* ty=float32 span=MobilenetV2/expanded_conv_11/add_quantize.scale__847:0:0 */, -8 /* ty=int32 span=MobilenetV2/expanded_conv_11/add_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 48, 65, 65), int8] span=MobilenetV2/expanded_conv_11/add_quantize:0:0 */;
  %432 = qnn.dequantize(%431, 0.140341f /* ty=float32 span=MobilenetV2/expanded_conv_11/add_quantize.scale__847:0:0 */, -8 /* ty=int32 span=tfl.conv_2d24_prequant__849_DequantizeLinear__1452:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 48, 65, 65), float32] span=tfl.conv_2d24_prequant__849_DequantizeLinear__1452:0:0 */;
  %433 = qnn.dequantize(meta[relay.Constant][217] /* ty=Tensor[(288, 48, 1, 1), int8] span=std.constant24_dequant.std.constant24:0:0 */, meta[relay.Constant][218] /* ty=Tensor[(288), float32] span=std.constant24_dequant.scale__229:0:0 */, meta[relay.Constant][219] /* ty=Tensor[(288), int32] span=std.constant24_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288, 48, 1, 1), float32] span=std.constant24_dequant:0:0 */;
  %434 = qnn.dequantize(meta[relay.Constant][220] /* ty=Tensor[(288), int32] span=std.constant68_dequant.std.constant68:0:0 */, meta[relay.Constant][221] /* ty=Tensor[(288), float32] span=std.constant68_dequant.scale__133:0:0 */, meta[relay.Constant][222] /* ty=Tensor[(288), int32] span=std.constant68_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288), float32] span=std.constant68_dequant:0:0 */;
  %435 = expand_dims(%434, axis=1, num_newaxis=2) /* ty=Tensor[(288, 1, 1), float32] */;
  %436 = nn.conv2d(%432, %433, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, 65, 65), float32] span=tfl.conv_2d24_prequant:0:0 */;
  %437 = expand_dims(%435, axis=0) /* ty=Tensor[(1, 288, 1, 1), float32] */;
  %438 = add(%436, %437) /* ty=Tensor[(1, 288, 65, 65), float32] */;
  %439 = clip(%438, a_min=0f, a_max=6f) /* ty=Tensor[(1, 288, 65, 65), float32] span=Relu6__65:0:0 */;
  %440 = qnn.quantize(%439, 0.0229987f /* ty=float32 span=tfl.conv_2d24_quantize.scale__866:0:0 */, -128 /* ty=int32 span=tfl.conv_2d24_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 288, 65, 65), int8] span=tfl.conv_2d24_quantize:0:0 */;
  %441 = qnn.dequantize(%440, 0.0229987f /* ty=float32 span=tfl.conv_2d24_quantize.scale__866:0:0 */, -128 /* ty=int32 span=tfl.conv_2d24_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 288, 65, 65), float32] span=tfl.conv_2d24_dequant:0:0 */;
  %442 = nn.pad(%441, 0f /* ty=float32 span=Pad__861:0:0 */, pad_width=[[0i64, 0i64], [0i64, 0i64], [2i64, 3i64], [2i64, 3i64]]) /* ty=Tensor[(1, 288, 70, 70), float32] span=Pad__861:0:0 */;
  %443 = reshape(%442, newshape=[288, 1, 70, 70]) /* ty=Tensor[(288, 1, 70, 70), float32] span=Transpose__859:0:0 */;
  %444 = nn.space_to_depth(%443, block_size=2, mode="") /* ty=Tensor[(288, 4, 35, 35), float32] span=SpaceToDepth__862:0:0 */;
  %445 = qnn.quantize(%444, 0.0229987f /* ty=float32 span=tfl.conv_2d24_quantize.scale__866:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_12/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(288, 4, 35, 35), int8] span=MobilenetV2/expanded_conv_12/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */;
  %446 = transpose(%445, axes=[1, 0, 2, 3]) /* ty=Tensor[(4, 288, 35, 35), int8] span=MobilenetV2/expanded_conv_12/depthwise/depthwise1_prequant__868:0:0 */;
  %447 = qnn.dequantize(%446, 0.0229987f /* ty=float32 span=tfl.conv_2d24_quantize.scale__866:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_12/depthwise/depthwise1_prequant__868_DequantizeLinear__1486:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(4, 288, 35, 35), float32] span=MobilenetV2/expanded_conv_12/depthwise/depthwise1_prequant__868_DequantizeLinear__1486:0:0 */;
  %448 = qnn.dequantize(meta[relay.Constant][223] /* ty=Tensor[(288, 1, 3, 3), int8] span=MobilenetV2/expanded_conv_12/depthwise/depthwise_dequant.MobilenetV2/expanded_conv_12/depthwise/depthwise:0:0 */, meta[relay.Constant][224] /* ty=Tensor[(288), float32] span=MobilenetV2/expanded_conv_12/depthwise/depthwise_dequant.scale__332:0:0 */, meta[relay.Constant][225] /* ty=Tensor[(288), int32] span=MobilenetV2/expanded_conv_12/depthwise/depthwise_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288, 1, 3, 3), float32] span=MobilenetV2/expanded_conv_12/depthwise/depthwise_dequant:0:0 */;
  %449 = expand_dims(%400, axis=1, num_newaxis=2) /* ty=Tensor[(288, 1, 1), float32] */;
  %450 = nn.conv2d(%447, %448, padding=[0, 0, 0, 0], groups=288, channels=288, kernel_size=[3, 3]) /* ty=Tensor[(4, 288, 33, 33), float32] span=MobilenetV2/expanded_conv_12/depthwise/depthwise1_prequant:0:0 */;
  %451 = expand_dims(%449, axis=0) /* ty=Tensor[(1, 288, 1, 1), float32] */;
  %452 = add(%450, %451) /* ty=Tensor[(4, 288, 33, 33), float32] */;
  %453 = qnn.quantize(%452, 0.103577f /* ty=float32 span=MobilenetV2/expanded_conv_12/depthwise/depthwise1_quantize.scale__887:0:0 */, 3 /* ty=int32 span=MobilenetV2/expanded_conv_12/depthwise/depthwise1_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(4, 288, 33, 33), int8] span=MobilenetV2/expanded_conv_12/depthwise/depthwise1_quantize:0:0 */;
  %454 = transpose(%453, axes=[1, 0, 2, 3]) /* ty=Tensor[(288, 4, 33, 33), int8] span=Transpose__878:0:0 */;
  %455 = nn.depth_to_space(%454, block_size=2) /* ty=Tensor[(288, 1, 66, 66), int8] span=DepthToSpace__879:0:0 */;
  %456 = strided_slice(%455, begin=[0i64, 0i64], end=[-1i64, -1i64], strides=[1i64, 1i64], axes=[2i64, 3i64]) /* ty=Tensor[(288, 1, 65, 65), int8] span=Slice__883:0:0 */;
  %457 = reshape(%456, newshape=[1, 288, 65, 65]) /* ty=Tensor[(1, 288, 65, 65), int8] span=Transpose__884:0:0 */;
  %458 = transpose(%457, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 65, 65, 288), int8] span=MobilenetV2/expanded_conv_12/depthwise/depthwise/BatchToSpaceND_prequant:0:0 */;
  %459 = qnn.dequantize(%458, 0.103577f /* ty=float32 span=MobilenetV2/expanded_conv_12/depthwise/depthwise1_quantize.scale__887:0:0 */, 3 /* ty=int32 span=MobilenetV2/expanded_conv_12/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1509:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 288), float32] span=MobilenetV2/expanded_conv_12/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1509:0:0 */;
  %460 = qnn.dequantize(meta[relay.Constant][226] /* ty=Tensor[(288), int8] span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm1_dequant.MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm1:0:0 */, 0.0307979f /* ty=float32 span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm1_dequant.scale__334:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288), float32] span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */;
  %461 = multiply(%459, %460) /* ty=Tensor[(1, 65, 65, 288), float32] span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm2_prequant:0:0 */;
  %462 = qnn.quantize(%461, 0.115538f /* ty=float32 span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__891:0:0 */, -32 /* ty=int32 span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 288), int8] span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */;
  %463 = qnn.dequantize(%462, 0.115538f /* ty=float32 span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__891:0:0 */, -32 /* ty=int32 span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 288), float32] span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */;
  %464 = qnn.dequantize(meta[relay.Constant][227] /* ty=Tensor[(288), int8] span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm:0:0 */, 0.0949845f /* ty=float32 span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__336:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288), float32] span=MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %465 = add(%463, %464) /* ty=Tensor[(1, 65, 65, 288), float32] span=tfl.add5_prequant:0:0 */;
  %466 = clip(%465, a_min=0f, a_max=6f) /* ty=Tensor[(1, 65, 65, 288), float32] span=Relu6__68:0:0 */;
  %467 = qnn.quantize(%466, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.add5_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 288), int8] span=tfl.add5_quantize:0:0 */;
  %468 = transpose(%467, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 288, 65, 65), int8] span=tfl.conv_2d25_prequant__899:0:0 */;
  %469 = qnn.dequantize(%468, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d25_prequant__899_DequantizeLinear__1325:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 288, 65, 65), float32] span=tfl.conv_2d25_prequant__899_DequantizeLinear__1325:0:0 */;
  %470 = qnn.dequantize(meta[relay.Constant][228] /* ty=Tensor[(48, 288, 1, 1), int8] span=std.constant25_dequant.std.constant25:0:0 */, meta[relay.Constant][229] /* ty=Tensor[(48), float32] span=std.constant25_dequant.scale__227:0:0 */, meta[relay.Constant][230] /* ty=Tensor[(48), int32] span=std.constant25_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(48, 288, 1, 1), float32] span=std.constant25_dequant:0:0 */;
  %471 = qnn.dequantize(meta[relay.Constant][231] /* ty=Tensor[(48), int32] span=std.constant69_dequant.std.constant69:0:0 */, meta[relay.Constant][232] /* ty=Tensor[(48), float32] span=std.constant69_dequant.scale__131:0:0 */, meta[relay.Constant][233] /* ty=Tensor[(48), int32] span=std.constant69_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(48), float32] span=std.constant69_dequant:0:0 */;
  %472 = expand_dims(%471, axis=1, num_newaxis=2) /* ty=Tensor[(48, 1, 1), float32] */;
  %473 = nn.conv2d(%469, %470, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 65, 65), float32] span=tfl.conv_2d25_prequant:0:0 */;
  %474 = expand_dims(%472, axis=0) /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %475 = add(%473, %474) /* ty=Tensor[(1, 48, 65, 65), float32] */;
  %476 = qnn.quantize(%475, 0.166999f /* ty=float32 span=tfl.conv_2d25_quantize.scale__904:0:0 */, -1 /* ty=int32 span=tfl.conv_2d25_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 48, 65, 65), int8] span=tfl.conv_2d25_quantize:0:0 */;
  %477 = qnn.dequantize(%476, 0.166999f /* ty=float32 span=tfl.conv_2d25_quantize.scale__904:0:0 */, -1 /* ty=int32 span=tfl.conv_2d25_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 48, 65, 65), float32] span=tfl.conv_2d25_dequant:0:0 */;
  %478 = add(%477, %432) /* ty=Tensor[(1, 48, 65, 65), float32] span=MobilenetV2/expanded_conv_12/add_prequant:0:0 */;
  %479 = qnn.quantize(%478, 0.173418f /* ty=float32 span=MobilenetV2/expanded_conv_12/add_quantize.scale__908:0:0 */, -3 /* ty=int32 span=MobilenetV2/expanded_conv_12/add_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 48, 65, 65), int8] span=MobilenetV2/expanded_conv_12/add_quantize:0:0 */;
  %480 = qnn.dequantize(%479, 0.173418f /* ty=float32 span=MobilenetV2/expanded_conv_12/add_quantize.scale__908:0:0 */, -3 /* ty=int32 span=tfl.conv_2d26_prequant__910_DequantizeLinear__1440:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 48, 65, 65), float32] span=tfl.conv_2d26_prequant__910_DequantizeLinear__1440:0:0 */;
  %481 = qnn.dequantize(meta[relay.Constant][234] /* ty=Tensor[(288, 48, 1, 1), int8] span=std.constant26_dequant.std.constant26:0:0 */, meta[relay.Constant][235] /* ty=Tensor[(288), float32] span=std.constant26_dequant.scale__225:0:0 */, meta[relay.Constant][236] /* ty=Tensor[(288), int32] span=std.constant26_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288, 48, 1, 1), float32] span=std.constant26_dequant:0:0 */;
  %482 = qnn.dequantize(meta[relay.Constant][237] /* ty=Tensor[(288), int32] span=std.constant70_dequant.std.constant70:0:0 */, meta[relay.Constant][238] /* ty=Tensor[(288), float32] span=std.constant70_dequant.scale__127:0:0 */, meta[relay.Constant][239] /* ty=Tensor[(288), int32] span=std.constant70_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288), float32] span=std.constant70_dequant:0:0 */;
  %483 = expand_dims(%482, axis=1, num_newaxis=2) /* ty=Tensor[(288, 1, 1), float32] */;
  %484 = nn.conv2d(%480, %481, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, 65, 65), float32] span=tfl.conv_2d26_prequant:0:0 */;
  %485 = expand_dims(%483, axis=0) /* ty=Tensor[(1, 288, 1, 1), float32] */;
  %486 = add(%484, %485) /* ty=Tensor[(1, 288, 65, 65), float32] */;
  %487 = clip(%486, a_min=0f, a_max=6f) /* ty=Tensor[(1, 288, 65, 65), float32] span=Relu6__70:0:0 */;
  %488 = qnn.quantize(%487, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d26_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 288, 65, 65), int8] span=tfl.conv_2d26_quantize:0:0 */;
  %489 = qnn.dequantize(%488, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d26_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 288, 65, 65), float32] span=tfl.conv_2d26_dequant:0:0 */;
  %490 = nn.pad(%489, 0f /* ty=float32 span=Pad__922:0:0 */, pad_width=[[0i64, 0i64], [0i64, 0i64], [2i64, 3i64], [2i64, 3i64]]) /* ty=Tensor[(1, 288, 70, 70), float32] span=Pad__922:0:0 */;
  %491 = reshape(%490, newshape=[288, 1, 70, 70]) /* ty=Tensor[(288, 1, 70, 70), float32] span=Transpose__920:0:0 */;
  %492 = nn.space_to_depth(%491, block_size=2, mode="") /* ty=Tensor[(288, 4, 35, 35), float32] span=SpaceToDepth__923:0:0 */;
  %493 = qnn.quantize(%492, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_13/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(288, 4, 35, 35), int8] span=MobilenetV2/expanded_conv_13/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */;
  %494 = transpose(%493, axes=[1, 0, 2, 3]) /* ty=Tensor[(4, 288, 35, 35), int8] span=MobilenetV2/expanded_conv_13/depthwise/depthwise2_prequant__929:0:0 */;
  %495 = qnn.dequantize(%494, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_13/depthwise/depthwise2_prequant__929_DequantizeLinear__1492:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(4, 288, 35, 35), float32] span=MobilenetV2/expanded_conv_13/depthwise/depthwise2_prequant__929_DequantizeLinear__1492:0:0 */;
  %496 = qnn.dequantize(meta[relay.Constant][240] /* ty=Tensor[(288, 1, 3, 3), int8] span=MobilenetV2/expanded_conv_13/depthwise/depthwise1_dequant.MobilenetV2/expanded_conv_13/depthwise/depthwise1:0:0 */, meta[relay.Constant][241] /* ty=Tensor[(288), float32] span=MobilenetV2/expanded_conv_13/depthwise/depthwise1_dequant.scale__324:0:0 */, meta[relay.Constant][242] /* ty=Tensor[(288), int32] span=MobilenetV2/expanded_conv_13/depthwise/depthwise1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288, 1, 3, 3), float32] span=MobilenetV2/expanded_conv_13/depthwise/depthwise1_dequant:0:0 */;
  %497 = expand_dims(%400, axis=1, num_newaxis=2) /* ty=Tensor[(288, 1, 1), float32] */;
  %498 = nn.conv2d(%495, %496, padding=[0, 0, 0, 0], groups=288, channels=288, kernel_size=[3, 3]) /* ty=Tensor[(4, 288, 33, 33), float32] span=MobilenetV2/expanded_conv_13/depthwise/depthwise2_prequant:0:0 */;
  %499 = expand_dims(%497, axis=0) /* ty=Tensor[(1, 288, 1, 1), float32] */;
  %500 = add(%498, %499) /* ty=Tensor[(4, 288, 33, 33), float32] */;
  %501 = qnn.quantize(%500, 0.196193f /* ty=float32 span=MobilenetV2/expanded_conv_13/depthwise/depthwise2_quantize.scale__948:0:0 */, -1 /* ty=int32 span=MobilenetV2/expanded_conv_13/depthwise/depthwise2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(4, 288, 33, 33), int8] span=MobilenetV2/expanded_conv_13/depthwise/depthwise2_quantize:0:0 */;
  %502 = transpose(%501, axes=[1, 0, 2, 3]) /* ty=Tensor[(288, 4, 33, 33), int8] span=Transpose__939:0:0 */;
  %503 = nn.depth_to_space(%502, block_size=2) /* ty=Tensor[(288, 1, 66, 66), int8] span=DepthToSpace__940:0:0 */;
  %504 = strided_slice(%503, begin=[0i64, 0i64], end=[-1i64, -1i64], strides=[1i64, 1i64], axes=[2i64, 3i64]) /* ty=Tensor[(288, 1, 65, 65), int8] span=Slice__944:0:0 */;
  %505 = reshape(%504, newshape=[1, 288, 65, 65]) /* ty=Tensor[(1, 288, 65, 65), int8] span=Transpose__945:0:0 */;
  %506 = transpose(%505, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 65, 65, 288), int8] span=MobilenetV2/expanded_conv_13/depthwise/depthwise/BatchToSpaceND_prequant:0:0 */;
  %507 = qnn.dequantize(%506, 0.196193f /* ty=float32 span=MobilenetV2/expanded_conv_13/depthwise/depthwise2_quantize.scale__948:0:0 */, -1 /* ty=int32 span=MobilenetV2/expanded_conv_13/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1518:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 288), float32] span=MobilenetV2/expanded_conv_13/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1518:0:0 */;
  %508 = qnn.dequantize(meta[relay.Constant][243] /* ty=Tensor[(288), int8] span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm1_dequant.MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm1:0:0 */, 0.258363f /* ty=float32 span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm1_dequant.scale__328:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288), float32] span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */;
  %509 = multiply(%507, %508) /* ty=Tensor[(1, 65, 65, 288), float32] span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm2_prequant:0:0 */;
  %510 = qnn.quantize(%509, 0.0782176f /* ty=float32 span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__952:0:0 */, -28 /* ty=int32 span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 288), int8] span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */;
  %511 = qnn.dequantize(%510, 0.0782176f /* ty=float32 span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__952:0:0 */, -28 /* ty=int32 span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 288), float32] span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */;
  %512 = qnn.dequantize(meta[relay.Constant][244] /* ty=Tensor[(288), int8] span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm:0:0 */, 0.0519593f /* ty=float32 span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__330:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(288), float32] span=MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %513 = add(%511, %512) /* ty=Tensor[(1, 65, 65, 288), float32] span=tfl.add6_prequant:0:0 */;
  %514 = clip(%513, a_min=0f, a_max=6f) /* ty=Tensor[(1, 65, 65, 288), float32] span=Relu6__73:0:0 */;
  %515 = qnn.quantize(%514, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.add6_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 288), int8] span=tfl.add6_quantize:0:0 */;
  %516 = transpose(%515, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 288, 65, 65), int8] span=tfl.conv_2d27_prequant__960:0:0 */;
  %517 = qnn.dequantize(%516, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d27_prequant__960_DequantizeLinear__1366:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 288, 65, 65), float32] span=tfl.conv_2d27_prequant__960_DequantizeLinear__1366:0:0 */;
  %518 = qnn.dequantize(meta[relay.Constant][245] /* ty=Tensor[(80, 288, 1, 1), int8] span=std.constant27_dequant.std.constant27:0:0 */, meta[relay.Constant][246] /* ty=Tensor[(80), float32] span=std.constant27_dequant.scale__223:0:0 */, meta[relay.Constant][247] /* ty=Tensor[(80), int32] span=std.constant27_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(80, 288, 1, 1), float32] span=std.constant27_dequant:0:0 */;
  %519 = qnn.dequantize(meta[relay.Constant][248] /* ty=Tensor[(80), int32] span=std.constant71_dequant.std.constant71:0:0 */, meta[relay.Constant][249] /* ty=Tensor[(80), float32] span=std.constant71_dequant.scale__125:0:0 */, meta[relay.Constant][250] /* ty=Tensor[(80), int32] span=std.constant71_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(80), float32] span=std.constant71_dequant:0:0 */;
  %520 = expand_dims(%519, axis=1, num_newaxis=2) /* ty=Tensor[(80, 1, 1), float32] */;
  %521 = nn.conv2d(%517, %518, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1]) /* ty=Tensor[(1, 80, 65, 65), float32] span=tfl.conv_2d27_prequant:0:0 */;
  %522 = expand_dims(%520, axis=0) /* ty=Tensor[(1, 80, 1, 1), float32] */;
  %523 = add(%521, %522) /* ty=Tensor[(1, 80, 65, 65), float32] */;
  %524 = qnn.quantize(%523, 0.0993365f /* ty=float32 span=tfl.conv_2d27_quantize.scale__965:0:0 */, 19 /* ty=int32 span=tfl.conv_2d27_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 80, 65, 65), int8] span=tfl.conv_2d27_quantize:0:0 */;
  %525 = qnn.dequantize(%524, 0.0993365f /* ty=float32 span=tfl.conv_2d27_quantize.scale__965:0:0 */, 19 /* ty=int32 span=tfl.conv_2d27_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 80, 65, 65), float32] span=tfl.conv_2d27_dequant:0:0 */;
  %526 = qnn.dequantize(meta[relay.Constant][251] /* ty=Tensor[(480, 80, 1, 1), int8] span=std.constant28_dequant.std.constant28:0:0 */, meta[relay.Constant][252] /* ty=Tensor[(480), float32] span=std.constant28_dequant.scale__221:0:0 */, meta[relay.Constant][253] /* ty=Tensor[(480), int32] span=std.constant28_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480, 80, 1, 1), float32] span=std.constant28_dequant:0:0 */;
  %527 = qnn.dequantize(meta[relay.Constant][254] /* ty=Tensor[(480), int32] span=std.constant72_dequant.std.constant72:0:0 */, meta[relay.Constant][255] /* ty=Tensor[(480), float32] span=std.constant72_dequant.scale__123:0:0 */, meta[relay.Constant][256] /* ty=Tensor[(480), int32] span=std.constant72_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480), float32] span=std.constant72_dequant:0:0 */;
  %528 = expand_dims(%527, axis=1, num_newaxis=2) /* ty=Tensor[(480, 1, 1), float32] */;
  %529 = nn.conv2d(%525, %526, padding=[0, 0, 0, 0], channels=480, kernel_size=[1, 1]) /* ty=Tensor[(1, 480, 65, 65), float32] span=tfl.conv_2d28_prequant:0:0 */;
  %530 = expand_dims(%528, axis=0) /* ty=Tensor[(1, 480, 1, 1), float32] */;
  %531 = add(%529, %530) /* ty=Tensor[(1, 480, 65, 65), float32] */;
  %532 = clip(%531, a_min=0f, a_max=6f) /* ty=Tensor[(1, 480, 65, 65), float32] span=Relu6__75:0:0 */;
  %533 = qnn.quantize(%532, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d28_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 480, 65, 65), int8] span=tfl.conv_2d28_quantize:0:0 */;
  %534 = qnn.dequantize(%533, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d28_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 480, 65, 65), float32] span=tfl.conv_2d28_dequant:0:0 */;
  %535 = nn.pad(%534, 0f /* ty=float32 span=Pad__979:0:0 */, pad_width=[[0i64, 0i64], [0i64, 0i64], [4i64, 7i64], [4i64, 7i64]]) /* ty=Tensor[(1, 480, 76, 76), float32] span=Pad__979:0:0 */;
  %536 = reshape(%535, newshape=[480, 1, 76, 76]) /* ty=Tensor[(480, 1, 76, 76), float32] span=Transpose__977:0:0 */;
  %537 = nn.space_to_depth(%536, block_size=4, mode="") /* ty=Tensor[(480, 16, 19, 19), float32] span=SpaceToDepth__980:0:0 */;
  %538 = qnn.quantize(%537, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_14/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(480, 16, 19, 19), int8] span=MobilenetV2/expanded_conv_14/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */;
  %539 = transpose(%538, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 480, 19, 19), int8] span=MobilenetV2/expanded_conv_14/depthwise/depthwise1_prequant__986:0:0 */;
  %540 = qnn.dequantize(%539, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_14/depthwise/depthwise1_prequant__986_DequantizeLinear__1490:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(16, 480, 19, 19), float32] span=MobilenetV2/expanded_conv_14/depthwise/depthwise1_prequant__986_DequantizeLinear__1490:0:0 */;
  %541 = qnn.dequantize(meta[relay.Constant][257] /* ty=Tensor[(480, 1, 3, 3), int8] span=MobilenetV2/expanded_conv_14/depthwise/depthwise_dequant.MobilenetV2/expanded_conv_14/depthwise/depthwise:0:0 */, meta[relay.Constant][258] /* ty=Tensor[(480), float32] span=MobilenetV2/expanded_conv_14/depthwise/depthwise_dequant.scale__318:0:0 */, meta[relay.Constant][259] /* ty=Tensor[(480), int32] span=MobilenetV2/expanded_conv_14/depthwise/depthwise_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480, 1, 3, 3), float32] span=MobilenetV2/expanded_conv_14/depthwise/depthwise_dequant:0:0 */;
  %542 = qnn.dequantize(meta[relay.Constant][260] /* ty=Tensor[(480), int32] span=std.constant76_dequant.MobilenetV2/expanded_conv_16/depthwise/depthwise:0:0 */, meta[relay.Constant][261] /* ty=Tensor[(480), float32] span=MobilenetV2/expanded_conv_16/depthwise/depthwise_dequant.scale__306:0:0 */, meta[relay.Constant][262] /* ty=Tensor[(480), int32] span=MobilenetV2/expanded_conv_16/depthwise/depthwise_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480), float32] span=MobilenetV2/expanded_conv_16/depthwise/depthwise_dequant:0:0 */;
  %543 = expand_dims(%542, axis=1, num_newaxis=2) /* ty=Tensor[(480, 1, 1), float32] */;
  %544 = nn.conv2d(%540, %541, padding=[0, 0, 0, 0], groups=480, channels=480, kernel_size=[3, 3]) /* ty=Tensor[(16, 480, 17, 17), float32] span=MobilenetV2/expanded_conv_14/depthwise/depthwise1_prequant:0:0 */;
  %545 = expand_dims(%543, axis=0) /* ty=Tensor[(1, 480, 1, 1), float32] */;
  %546 = add(%544, %545) /* ty=Tensor[(16, 480, 17, 17), float32] */;
  %547 = qnn.quantize(%546, 0.185863f /* ty=float32 span=MobilenetV2/expanded_conv_14/depthwise/depthwise1_quantize.scale__1005:0:0 */, 69 /* ty=int32 span=MobilenetV2/expanded_conv_14/depthwise/depthwise1_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(16, 480, 17, 17), int8] span=MobilenetV2/expanded_conv_14/depthwise/depthwise1_quantize:0:0 */;
  %548 = transpose(%547, axes=[1, 0, 2, 3]) /* ty=Tensor[(480, 16, 17, 17), int8] span=Transpose__996:0:0 */;
  %549 = nn.depth_to_space(%548, block_size=4) /* ty=Tensor[(480, 1, 68, 68), int8] span=DepthToSpace__997:0:0 */;
  %550 = strided_slice(%549, begin=[0i64, 0i64], end=[-3i64, -3i64], strides=[1i64, 1i64], axes=[2i64, 3i64]) /* ty=Tensor[(480, 1, 65, 65), int8] span=Slice__1001:0:0 */;
  %551 = reshape(%550, newshape=[1, 480, 65, 65]) /* ty=Tensor[(1, 480, 65, 65), int8] span=Transpose__1002:0:0 */;
  %552 = transpose(%551, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 65, 65, 480), int8] span=MobilenetV2/expanded_conv_14/depthwise/depthwise/BatchToSpaceND_prequant:0:0 */;
  %553 = qnn.dequantize(%552, 0.185863f /* ty=float32 span=MobilenetV2/expanded_conv_14/depthwise/depthwise1_quantize.scale__1005:0:0 */, 69 /* ty=int32 span=MobilenetV2/expanded_conv_14/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1516:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 480), float32] span=MobilenetV2/expanded_conv_14/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1516:0:0 */;
  %554 = qnn.dequantize(meta[relay.Constant][263] /* ty=Tensor[(480), int8] span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm1_dequant.MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm1:0:0 */, 0.0526063f /* ty=float32 span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm1_dequant.scale__320:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480), float32] span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */;
  %555 = multiply(%553, %554) /* ty=Tensor[(1, 65, 65, 480), float32] span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm2_prequant:0:0 */;
  %556 = qnn.quantize(%555, 0.139862f /* ty=float32 span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__1007:0:0 */, 49 /* ty=int32 span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 480), int8] span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */;
  %557 = qnn.dequantize(%556, 0.139862f /* ty=float32 span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__1007:0:0 */, 49 /* ty=int32 span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 480), float32] span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */;
  %558 = qnn.dequantize(meta[relay.Constant][264] /* ty=Tensor[(480), int8] span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm:0:0 */, 0.0671673f /* ty=float32 span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__322:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480), float32] span=MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %559 = add(%557, %558) /* ty=Tensor[(1, 65, 65, 480), float32] span=tfl.add7_prequant:0:0 */;
  %560 = clip(%559, a_min=0f, a_max=6f) /* ty=Tensor[(1, 65, 65, 480), float32] span=Relu6__78:0:0 */;
  %561 = qnn.quantize(%560, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.add7_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 480), int8] span=tfl.add7_quantize:0:0 */;
  %562 = transpose(%561, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 480, 65, 65), int8] span=tfl.conv_2d29_prequant__1017:0:0 */;
  %563 = qnn.dequantize(%562, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d29_prequant__1017_DequantizeLinear__1397:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 480, 65, 65), float32] span=tfl.conv_2d29_prequant__1017_DequantizeLinear__1397:0:0 */;
  %564 = qnn.dequantize(meta[relay.Constant][265] /* ty=Tensor[(80, 480, 1, 1), int8] span=std.constant29_dequant.std.constant29:0:0 */, meta[relay.Constant][266] /* ty=Tensor[(80), float32] span=std.constant29_dequant.scale__219:0:0 */, meta[relay.Constant][267] /* ty=Tensor[(80), int32] span=std.constant29_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(80, 480, 1, 1), float32] span=std.constant29_dequant:0:0 */;
  %565 = qnn.dequantize(meta[relay.Constant][268] /* ty=Tensor[(80), int32] span=std.constant73_dequant.std.constant73:0:0 */, meta[relay.Constant][269] /* ty=Tensor[(80), float32] span=std.constant73_dequant.scale__121:0:0 */, meta[relay.Constant][270] /* ty=Tensor[(80), int32] span=std.constant73_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(80), float32] span=std.constant73_dequant:0:0 */;
  %566 = expand_dims(%565, axis=1, num_newaxis=2) /* ty=Tensor[(80, 1, 1), float32] */;
  %567 = nn.conv2d(%563, %564, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1]) /* ty=Tensor[(1, 80, 65, 65), float32] span=tfl.conv_2d29_prequant:0:0 */;
  %568 = expand_dims(%566, axis=0) /* ty=Tensor[(1, 80, 1, 1), float32] */;
  %569 = add(%567, %568) /* ty=Tensor[(1, 80, 65, 65), float32] */;
  %570 = qnn.quantize(%569, 0.0757901f /* ty=float32 span=tfl.conv_2d29_quantize.scale__1020:0:0 */, 4 /* ty=int32 span=tfl.conv_2d29_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 80, 65, 65), int8] span=tfl.conv_2d29_quantize:0:0 */;
  %571 = qnn.dequantize(%570, 0.0757901f /* ty=float32 span=tfl.conv_2d29_quantize.scale__1020:0:0 */, 4 /* ty=int32 span=tfl.conv_2d29_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 80, 65, 65), float32] span=tfl.conv_2d29_dequant:0:0 */;
  %572 = add(%571, %525) /* ty=Tensor[(1, 80, 65, 65), float32] span=MobilenetV2/expanded_conv_14/add_prequant:0:0 */;
  %573 = qnn.quantize(%572, 0.10542f /* ty=float32 span=MobilenetV2/expanded_conv_14/add_quantize.scale__1026:0:0 */, 5 /* ty=int32 span=MobilenetV2/expanded_conv_14/add_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 80, 65, 65), int8] span=MobilenetV2/expanded_conv_14/add_quantize:0:0 */;
  %574 = qnn.dequantize(%573, 0.10542f /* ty=float32 span=MobilenetV2/expanded_conv_14/add_quantize.scale__1026:0:0 */, 5 /* ty=int32 span=tfl.conv_2d30_prequant__1028_DequantizeLinear__1402:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 80, 65, 65), float32] span=tfl.conv_2d30_prequant__1028_DequantizeLinear__1402:0:0 */;
  %575 = qnn.dequantize(meta[relay.Constant][271] /* ty=Tensor[(480, 80, 1, 1), int8] span=std.constant30_dequant.std.constant30:0:0 */, meta[relay.Constant][272] /* ty=Tensor[(480), float32] span=std.constant30_dequant.scale__215:0:0 */, meta[relay.Constant][273] /* ty=Tensor[(480), int32] span=std.constant30_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480, 80, 1, 1), float32] span=std.constant30_dequant:0:0 */;
  %576 = qnn.dequantize(meta[relay.Constant][274] /* ty=Tensor[(480), int32] span=std.constant74_dequant.std.constant74:0:0 */, meta[relay.Constant][275] /* ty=Tensor[(480), float32] span=std.constant74_dequant.scale__119:0:0 */, meta[relay.Constant][276] /* ty=Tensor[(480), int32] span=std.constant74_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480), float32] span=std.constant74_dequant:0:0 */;
  %577 = expand_dims(%576, axis=1, num_newaxis=2) /* ty=Tensor[(480, 1, 1), float32] */;
  %578 = nn.conv2d(%574, %575, padding=[0, 0, 0, 0], channels=480, kernel_size=[1, 1]) /* ty=Tensor[(1, 480, 65, 65), float32] span=tfl.conv_2d30_prequant:0:0 */;
  %579 = expand_dims(%577, axis=0) /* ty=Tensor[(1, 480, 1, 1), float32] */;
  %580 = add(%578, %579) /* ty=Tensor[(1, 480, 65, 65), float32] */;
  %581 = clip(%580, a_min=0f, a_max=6f) /* ty=Tensor[(1, 480, 65, 65), float32] span=Relu6__80:0:0 */;
  %582 = qnn.quantize(%581, 0.0218905f /* ty=float32 span=tfl.conv_2d30_quantize.scale__1043:0:0 */, -128 /* ty=int32 span=tfl.conv_2d30_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 480, 65, 65), int8] span=tfl.conv_2d30_quantize:0:0 */;
  %583 = qnn.dequantize(%582, 0.0218905f /* ty=float32 span=tfl.conv_2d30_quantize.scale__1043:0:0 */, -128 /* ty=int32 span=tfl.conv_2d30_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 480, 65, 65), float32] span=tfl.conv_2d30_dequant:0:0 */;
  %584 = nn.pad(%583, 0f /* ty=float32 span=Pad__1040:0:0 */, pad_width=[[0i64, 0i64], [0i64, 0i64], [4i64, 7i64], [4i64, 7i64]]) /* ty=Tensor[(1, 480, 76, 76), float32] span=Pad__1040:0:0 */;
  %585 = reshape(%584, newshape=[480, 1, 76, 76]) /* ty=Tensor[(480, 1, 76, 76), float32] span=Transpose__1038:0:0 */;
  %586 = nn.space_to_depth(%585, block_size=4, mode="") /* ty=Tensor[(480, 16, 19, 19), float32] span=SpaceToDepth__1041:0:0 */;
  %587 = qnn.quantize(%586, 0.0218905f /* ty=float32 span=tfl.conv_2d30_quantize.scale__1043:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_15/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(480, 16, 19, 19), int8] span=MobilenetV2/expanded_conv_15/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */;
  %588 = transpose(%587, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 480, 19, 19), int8] span=MobilenetV2/expanded_conv_15/depthwise/depthwise1_prequant__1047:0:0 */;
  %589 = qnn.dequantize(%588, 0.0218905f /* ty=float32 span=tfl.conv_2d30_quantize.scale__1043:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_15/depthwise/depthwise1_prequant__1047_DequantizeLinear__1485:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(16, 480, 19, 19), float32] span=MobilenetV2/expanded_conv_15/depthwise/depthwise1_prequant__1047_DequantizeLinear__1485:0:0 */;
  %590 = qnn.dequantize(meta[relay.Constant][277] /* ty=Tensor[(480, 1, 3, 3), int8] span=MobilenetV2/expanded_conv_15/depthwise/depthwise_dequant.MobilenetV2/expanded_conv_15/depthwise/depthwise:0:0 */, meta[relay.Constant][278] /* ty=Tensor[(480), float32] span=MobilenetV2/expanded_conv_15/depthwise/depthwise_dequant.scale__312:0:0 */, meta[relay.Constant][279] /* ty=Tensor[(480), int32] span=MobilenetV2/expanded_conv_15/depthwise/depthwise_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480, 1, 3, 3), float32] span=MobilenetV2/expanded_conv_15/depthwise/depthwise_dequant:0:0 */;
  %591 = expand_dims(%542, axis=1, num_newaxis=2) /* ty=Tensor[(480, 1, 1), float32] */;
  %592 = nn.conv2d(%589, %590, padding=[0, 0, 0, 0], groups=480, channels=480, kernel_size=[3, 3]) /* ty=Tensor[(16, 480, 17, 17), float32] span=MobilenetV2/expanded_conv_15/depthwise/depthwise1_prequant:0:0 */;
  %593 = expand_dims(%591, axis=0) /* ty=Tensor[(1, 480, 1, 1), float32] */;
  %594 = add(%592, %593) /* ty=Tensor[(16, 480, 17, 17), float32] */;
  %595 = qnn.quantize(%594, 0.0870277f /* ty=float32 span=MobilenetV2/expanded_conv_15/depthwise/depthwise1_quantize.scale__1054:0:0 */, 12 /* ty=int32 span=MobilenetV2/expanded_conv_15/depthwise/depthwise1_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(16, 480, 17, 17), int8] span=MobilenetV2/expanded_conv_15/depthwise/depthwise1_quantize:0:0 */;
  %596 = transpose(%595, axes=[1, 0, 2, 3]) /* ty=Tensor[(480, 16, 17, 17), int8] span=Transpose__1057:0:0 */;
  %597 = nn.depth_to_space(%596, block_size=4) /* ty=Tensor[(480, 1, 68, 68), int8] span=DepthToSpace__1058:0:0 */;
  %598 = strided_slice(%597, begin=[0i64, 0i64], end=[-3i64, -3i64], strides=[1i64, 1i64], axes=[2i64, 3i64]) /* ty=Tensor[(480, 1, 65, 65), int8] span=Slice__1062:0:0 */;
  %599 = reshape(%598, newshape=[1, 480, 65, 65]) /* ty=Tensor[(1, 480, 65, 65), int8] span=Transpose__1063:0:0 */;
  %600 = transpose(%599, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 65, 65, 480), int8] span=MobilenetV2/expanded_conv_15/depthwise/depthwise/BatchToSpaceND_prequant:0:0 */;
  %601 = qnn.dequantize(%600, 0.0870277f /* ty=float32 span=MobilenetV2/expanded_conv_15/depthwise/depthwise1_quantize.scale__1054:0:0 */, 12 /* ty=int32 span=MobilenetV2/expanded_conv_15/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1517:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 480), float32] span=MobilenetV2/expanded_conv_15/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1517:0:0 */;
  %602 = qnn.dequantize(meta[relay.Constant][280] /* ty=Tensor[(480), int8] span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm1_dequant.MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm1:0:0 */, 0.357503f /* ty=float32 span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm1_dequant.scale__314:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480), float32] span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */;
  %603 = multiply(%601, %602) /* ty=Tensor[(1, 65, 65, 480), float32] span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm2_prequant:0:0 */;
  %604 = qnn.quantize(%603, 0.0846646f /* ty=float32 span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__1070:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 480), int8] span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */;
  %605 = qnn.dequantize(%604, 0.0846646f /* ty=float32 span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__1070:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 480), float32] span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */;
  %606 = qnn.dequantize(meta[relay.Constant][281] /* ty=Tensor[(480), int8] span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm:0:0 */, 0.102508f /* ty=float32 span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__316:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480), float32] span=MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %607 = add(%605, %606) /* ty=Tensor[(1, 65, 65, 480), float32] span=tfl.add8_prequant:0:0 */;
  %608 = clip(%607, a_min=0f, a_max=6f) /* ty=Tensor[(1, 65, 65, 480), float32] span=Relu6__83:0:0 */;
  %609 = qnn.quantize(%608, 0.0225382f /* ty=float32 span=tfl.add8_quantize.scale__1076:0:0 */, -128 /* ty=int32 span=tfl.add8_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 480), int8] span=tfl.add8_quantize:0:0 */;
  %610 = transpose(%609, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 480, 65, 65), int8] span=tfl.conv_2d31_prequant__1078:0:0 */;
  %611 = qnn.dequantize(%610, 0.0225382f /* ty=float32 span=tfl.add8_quantize.scale__1076:0:0 */, -128 /* ty=int32 span=tfl.conv_2d31_prequant__1078_DequantizeLinear__1369:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 480, 65, 65), float32] span=tfl.conv_2d31_prequant__1078_DequantizeLinear__1369:0:0 */;
  %612 = qnn.dequantize(meta[relay.Constant][282] /* ty=Tensor[(80, 480, 1, 1), int8] span=std.constant31_dequant.std.constant31:0:0 */, meta[relay.Constant][283] /* ty=Tensor[(80), float32] span=std.constant31_dequant.scale__213:0:0 */, meta[relay.Constant][284] /* ty=Tensor[(80), int32] span=std.constant31_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(80, 480, 1, 1), float32] span=std.constant31_dequant:0:0 */;
  %613 = qnn.dequantize(meta[relay.Constant][285] /* ty=Tensor[(80), int32] span=std.constant75_dequant.std.constant75:0:0 */, meta[relay.Constant][286] /* ty=Tensor[(80), float32] span=std.constant75_dequant.scale__117:0:0 */, meta[relay.Constant][287] /* ty=Tensor[(80), int32] span=std.constant75_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(80), float32] span=std.constant75_dequant:0:0 */;
  %614 = expand_dims(%613, axis=1, num_newaxis=2) /* ty=Tensor[(80, 1, 1), float32] */;
  %615 = nn.conv2d(%611, %612, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1]) /* ty=Tensor[(1, 80, 65, 65), float32] span=tfl.conv_2d31_prequant:0:0 */;
  %616 = expand_dims(%614, axis=0) /* ty=Tensor[(1, 80, 1, 1), float32] */;
  %617 = add(%615, %616) /* ty=Tensor[(1, 80, 65, 65), float32] */;
  %618 = qnn.quantize(%617, 0.088658f /* ty=float32 span=tfl.conv_2d31_quantize.scale__1083:0:0 */, 2 /* ty=int32 span=tfl.conv_2d31_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 80, 65, 65), int8] span=tfl.conv_2d31_quantize:0:0 */;
  %619 = qnn.dequantize(%618, 0.088658f /* ty=float32 span=tfl.conv_2d31_quantize.scale__1083:0:0 */, 2 /* ty=int32 span=tfl.conv_2d31_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 80, 65, 65), float32] span=tfl.conv_2d31_dequant:0:0 */;
  %620 = add(%619, %574) /* ty=Tensor[(1, 80, 65, 65), float32] span=MobilenetV2/expanded_conv_15/add_prequant:0:0 */;
  %621 = qnn.quantize(%620, 0.130806f /* ty=float32 span=MobilenetV2/expanded_conv_15/add_quantize.scale__1087:0:0 */, -10 /* ty=int32 span=MobilenetV2/expanded_conv_15/add_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 80, 65, 65), int8] span=MobilenetV2/expanded_conv_15/add_quantize:0:0 */;
  %622 = qnn.dequantize(%621, 0.130806f /* ty=float32 span=MobilenetV2/expanded_conv_15/add_quantize.scale__1087:0:0 */, -10 /* ty=int32 span=tfl.conv_2d32_prequant__1089_DequantizeLinear__1460:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 80, 65, 65), float32] span=tfl.conv_2d32_prequant__1089_DequantizeLinear__1460:0:0 */;
  %623 = qnn.dequantize(meta[relay.Constant][288] /* ty=Tensor[(480, 80, 1, 1), int8] span=std.constant32_dequant.std.constant32:0:0 */, meta[relay.Constant][289] /* ty=Tensor[(480), float32] span=std.constant32_dequant.scale__211:0:0 */, meta[relay.Constant][290] /* ty=Tensor[(480), int32] span=std.constant32_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480, 80, 1, 1), float32] span=std.constant32_dequant:0:0 */;
  %624 = qnn.dequantize(meta[relay.Constant][291] /* ty=Tensor[(480), int32] span=std.constant76_dequant.std.constant76:0:0 */, meta[relay.Constant][292] /* ty=Tensor[(480), float32] span=std.constant76_dequant.scale__115:0:0 */, meta[relay.Constant][293] /* ty=Tensor[(480), int32] span=std.constant76_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480), float32] span=std.constant76_dequant:0:0 */;
  %625 = expand_dims(%624, axis=1, num_newaxis=2) /* ty=Tensor[(480, 1, 1), float32] */;
  %626 = nn.conv2d(%622, %623, padding=[0, 0, 0, 0], channels=480, kernel_size=[1, 1]) /* ty=Tensor[(1, 480, 65, 65), float32] span=tfl.conv_2d32_prequant:0:0 */;
  %627 = expand_dims(%625, axis=0) /* ty=Tensor[(1, 480, 1, 1), float32] */;
  %628 = add(%626, %627) /* ty=Tensor[(1, 480, 65, 65), float32] */;
  %629 = clip(%628, a_min=0f, a_max=6f) /* ty=Tensor[(1, 480, 65, 65), float32] span=Relu6__85:0:0 */;
  %630 = qnn.quantize(%629, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d32_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 480, 65, 65), int8] span=tfl.conv_2d32_quantize:0:0 */;
  %631 = qnn.dequantize(%630, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d32_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 480, 65, 65), float32] span=tfl.conv_2d32_dequant:0:0 */;
  %632 = nn.pad(%631, 0f /* ty=float32 span=Pad__1101:0:0 */, pad_width=[[0i64, 0i64], [0i64, 0i64], [4i64, 7i64], [4i64, 7i64]]) /* ty=Tensor[(1, 480, 76, 76), float32] span=Pad__1101:0:0 */;
  %633 = reshape(%632, newshape=[480, 1, 76, 76]) /* ty=Tensor[(480, 1, 76, 76), float32] span=Transpose__1099:0:0 */;
  %634 = nn.space_to_depth(%633, block_size=4, mode="") /* ty=Tensor[(480, 16, 19, 19), float32] span=SpaceToDepth__1102:0:0 */;
  %635 = qnn.quantize(%634, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_16/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(480, 16, 19, 19), int8] span=MobilenetV2/expanded_conv_16/depthwise/depthwise/SpaceToBatchND_quantize:0:0 */;
  %636 = transpose(%635, axes=[1, 0, 2, 3]) /* ty=Tensor[(16, 480, 19, 19), int8] span=MobilenetV2/expanded_conv_16/depthwise/depthwise2_prequant__1108:0:0 */;
  %637 = qnn.dequantize(%636, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=MobilenetV2/expanded_conv_16/depthwise/depthwise2_prequant__1108_DequantizeLinear__1480:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(16, 480, 19, 19), float32] span=MobilenetV2/expanded_conv_16/depthwise/depthwise2_prequant__1108_DequantizeLinear__1480:0:0 */;
  %638 = qnn.dequantize(meta[relay.Constant][294] /* ty=Tensor[(480, 1, 3, 3), int8] span=MobilenetV2/expanded_conv_16/depthwise/depthwise1_dequant.MobilenetV2/expanded_conv_16/depthwise/depthwise1:0:0 */, meta[relay.Constant][295] /* ty=Tensor[(480), float32] span=MobilenetV2/expanded_conv_16/depthwise/depthwise1_dequant.scale__304:0:0 */, meta[relay.Constant][296] /* ty=Tensor[(480), int32] span=MobilenetV2/expanded_conv_16/depthwise/depthwise1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480, 1, 3, 3), float32] span=MobilenetV2/expanded_conv_16/depthwise/depthwise1_dequant:0:0 */;
  %639 = expand_dims(%542, axis=1, num_newaxis=2) /* ty=Tensor[(480, 1, 1), float32] */;
  %640 = nn.conv2d(%637, %638, padding=[0, 0, 0, 0], groups=480, channels=480, kernel_size=[3, 3]) /* ty=Tensor[(16, 480, 17, 17), float32] span=MobilenetV2/expanded_conv_16/depthwise/depthwise2_prequant:0:0 */;
  %641 = expand_dims(%639, axis=0) /* ty=Tensor[(1, 480, 1, 1), float32] */;
  %642 = add(%640, %641) /* ty=Tensor[(16, 480, 17, 17), float32] */;
  %643 = qnn.quantize(%642, 0.103554f /* ty=float32 span=MobilenetV2/expanded_conv_16/depthwise/depthwise2_quantize.scale__1127:0:0 */, 30 /* ty=int32 span=MobilenetV2/expanded_conv_16/depthwise/depthwise2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(16, 480, 17, 17), int8] span=MobilenetV2/expanded_conv_16/depthwise/depthwise2_quantize:0:0 */;
  %644 = transpose(%643, axes=[1, 0, 2, 3]) /* ty=Tensor[(480, 16, 17, 17), int8] span=Transpose__1118:0:0 */;
  %645 = nn.depth_to_space(%644, block_size=4) /* ty=Tensor[(480, 1, 68, 68), int8] span=DepthToSpace__1119:0:0 */;
  %646 = strided_slice(%645, begin=[0i64, 0i64], end=[-3i64, -3i64], strides=[1i64, 1i64], axes=[2i64, 3i64]) /* ty=Tensor[(480, 1, 65, 65), int8] span=Slice__1123:0:0 */;
  %647 = reshape(%646, newshape=[1, 480, 65, 65]) /* ty=Tensor[(1, 480, 65, 65), int8] span=Transpose__1124:0:0 */;
  %648 = transpose(%647, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 65, 65, 480), int8] span=MobilenetV2/expanded_conv_16/depthwise/depthwise/BatchToSpaceND_prequant:0:0 */;
  %649 = qnn.dequantize(%648, 0.103554f /* ty=float32 span=MobilenetV2/expanded_conv_16/depthwise/depthwise2_quantize.scale__1127:0:0 */, 30 /* ty=int32 span=MobilenetV2/expanded_conv_16/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1510:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 480), float32] span=MobilenetV2/expanded_conv_16/depthwise/depthwise/BatchToSpaceND_prequant_DequantizeLinear__1510:0:0 */;
  %650 = qnn.dequantize(meta[relay.Constant][297] /* ty=Tensor[(480), int8] span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm1_dequant.MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm1:0:0 */, 0.477971f /* ty=float32 span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm1_dequant.scale__308:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480), float32] span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm1_dequant:0:0 */;
  %651 = multiply(%649, %650) /* ty=Tensor[(1, 65, 65, 480), float32] span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm2_prequant:0:0 */;
  %652 = qnn.quantize(%651, 0.0739886f /* ty=float32 span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__1131:0:0 */, 41 /* ty=int32 span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 480), int8] span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm2_quantize:0:0 */;
  %653 = qnn.dequantize(%652, 0.0739886f /* ty=float32 span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm2_quantize.scale__1131:0:0 */, 41 /* ty=int32 span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 65, 65, 480), float32] span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm2_dequant:0:0 */;
  %654 = qnn.dequantize(meta[relay.Constant][298] /* ty=Tensor[(480), int8] span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm_dequant.MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm:0:0 */, 0.063226f /* ty=float32 span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm_dequant.scale__310:0:0 */, 0 /* ty=int32 span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(480), float32] span=MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm_dequant:0:0 */;
  %655 = add(%653, %654) /* ty=Tensor[(1, 65, 65, 480), float32] span=tfl.add9_prequant:0:0 */;
  %656 = clip(%655, a_min=0f, a_max=6f) /* ty=Tensor[(1, 65, 65, 480), float32] span=Relu6__88:0:0 */;
  %657 = qnn.quantize(%656, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.add9_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 65, 65, 480), int8] span=tfl.add9_quantize:0:0 */;
  %658 = transpose(%657, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 480, 65, 65), int8] span=tfl.conv_2d33_prequant__1139:0:0 */;
  %659 = qnn.dequantize(%658, 0.0235294f /* ty=float32 span=tfl.conv_2d_quantize.scale__553:0:0 */, -128 /* ty=int32 span=tfl.conv_2d33_prequant__1139_DequantizeLinear__1364:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 480, 65, 65), float32] span=tfl.conv_2d33_prequant__1139_DequantizeLinear__1364:0:0 */;
  %660 = qnn.dequantize(meta[relay.Constant][299] /* ty=Tensor[(160, 480, 1, 1), int8] span=std.constant33_dequant.std.constant33:0:0 */, meta[relay.Constant][300] /* ty=Tensor[(160), float32] span=std.constant33_dequant.scale__209:0:0 */, meta[relay.Constant][301] /* ty=Tensor[(160), int32] span=std.constant33_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(160, 480, 1, 1), float32] span=std.constant33_dequant:0:0 */;
  %661 = qnn.dequantize(meta[relay.Constant][302] /* ty=Tensor[(160), int32] span=std.constant77_dequant.std.constant77:0:0 */, meta[relay.Constant][303] /* ty=Tensor[(160), float32] span=std.constant77_dequant.scale__113:0:0 */, meta[relay.Constant][304] /* ty=Tensor[(160), int32] span=std.constant77_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(160), float32] span=std.constant77_dequant:0:0 */;
  %662 = expand_dims(%661, axis=1, num_newaxis=2) /* ty=Tensor[(160, 1, 1), float32] */;
  %663 = nn.conv2d(%659, %660, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 65, 65), float32] span=tfl.conv_2d33_prequant:0:0 */;
  %664 = expand_dims(%662, axis=0) /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %665 = add(%663, %664) /* ty=Tensor[(1, 160, 65, 65), float32] */;
  %666 = qnn.quantize(%665, 0.0571218f /* ty=float32 span=tfl.conv_2d33_quantize.scale__1144:0:0 */, -5 /* ty=int32 span=tfl.conv_2d33_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 160, 65, 65), int8] span=tfl.conv_2d33_quantize:0:0 */;
  %667 = qnn.dequantize(%666, 0.0571218f /* ty=float32 span=tfl.conv_2d33_quantize.scale__1144:0:0 */, -5 /* ty=int32 span=tfl.conv_2d35_prequant__1146_DequantizeLinear__1439:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 160, 65, 65), float32] span=tfl.conv_2d35_prequant__1146_DequantizeLinear__1439:0:0 */;
  %668 = layout_transform(%667, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 65, 65, 160), float32] */;
  %669 = nn.avg_pool2d(%668, pool_size=[65, 65], padding=[0, 0, 0, 0], layout="NHWC", out_layout="NHWC") /* ty=Tensor[(1, 1, 1, 160), float32] span=AvgPool2D/AvgPool_prequant:0:0 */;
  %670 = qnn.quantize(%669, 0.0571218f /* ty=float32 span=tfl.conv_2d33_quantize.scale__1144:0:0 */, -5 /* ty=int32 span=AvgPool2D/AvgPool_quantize:0:0 */, out_dtype="int8", axis=3) /* ty=Tensor[(1, 1, 1, 160), int8] span=AvgPool2D/AvgPool_quantize:0:0 */;
  %671 = layout_transform(%670, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %672 = reshape(%671, newshape=[1, 160, 1, 1]) /* ty=Tensor[(1, 160, 1, 1), int8] span=tfl.conv_2d34_prequant__1159:0:0 */;
  %673 = qnn.dequantize(%672, 0.0571218f /* ty=float32 span=tfl.conv_2d33_quantize.scale__1144:0:0 */, -5 /* ty=int32 span=tfl.conv_2d34_prequant__1159_DequantizeLinear__1426:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 160, 1, 1), float32] span=tfl.conv_2d34_prequant__1159_DequantizeLinear__1426:0:0 */;
  %674 = qnn.dequantize(meta[relay.Constant][305] /* ty=Tensor[(256, 160, 1, 1), int8] span=std.constant34_dequant.std.constant34:0:0 */, meta[relay.Constant][306] /* ty=Tensor[(256), float32] span=std.constant34_dequant.scale__207:0:0 */, meta[relay.Constant][307] /* ty=Tensor[(256), int32] span=std.constant34_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(256, 160, 1, 1), float32] span=std.constant34_dequant:0:0 */;
  %675 = qnn.dequantize(meta[relay.Constant][308] /* ty=Tensor[(256), int32] span=std.constant78_dequant.std.constant78:0:0 */, meta[relay.Constant][309] /* ty=Tensor[(256), float32] span=std.constant78_dequant.scale__111:0:0 */, meta[relay.Constant][310] /* ty=Tensor[(256), int32] span=std.constant78_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(256), float32] span=std.constant78_dequant:0:0 */;
  %676 = expand_dims(%675, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %677 = nn.conv2d(%673, %674, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] span=tfl.conv_2d34_prequant:0:0 */;
  %678 = expand_dims(%676, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %679 = add(%677, %678) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %680 = nn.relu(%679) /* ty=Tensor[(1, 256, 1, 1), float32] span=Relu__90:0:0 */;
  %681 = qnn.quantize(%680, 0.010437f /* ty=float32 span=tfl.conv_2d34_quantize.scale__1172:0:0 */, -128 /* ty=int32 span=tfl.conv_2d34_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 256, 1, 1), int8] span=tfl.conv_2d34_quantize:0:0 */;
  %682 = reshape(%681, newshape=[1, 256, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), int8] span=Transpose__1167:0:0 */;
  %683 = qnn.dequantize(%682, 0.010437f /* ty=float32 span=tfl.conv_2d34_quantize.scale__1172:0:0 */, -128 /* ty=int32 span=Transpose__1167_DequantizeLinear__1467:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 256, 1, 1), float32] span=Transpose__1167_DequantizeLinear__1467:0:0 */;
  %684 = image.resize2d(%683, size=[65, 65], roi=[0f, 0f, 0f, 0f], coordinate_transformation_mode="align_corners", rounding_method="round_prefer_ceil", cubic_alpha=-0.75f) /* ty=Tensor[(1, 256, 65, 65), float32] span=Resize__1169:0:0 */;
  %685 = qnn.quantize(%684, 0.010437f /* ty=float32 span=tfl.conv_2d34_quantize.scale__1172:0:0 */, -128 /* ty=int32 span=ResizeBilinear_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 256, 65, 65), int8] span=ResizeBilinear_quantize:0:0 */;
  %686 = qnn.dequantize(%685, 0.010437f /* ty=float32 span=tfl.conv_2d34_quantize.scale__1172:0:0 */, -128 /* ty=int32 span=ResizeBilinear_dequant:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 256, 65, 65), float32] span=ResizeBilinear_dequant:0:0 */;
  %687 = qnn.dequantize(meta[relay.Constant][311] /* ty=Tensor[(256, 160, 1, 1), int8] span=std.constant35_dequant.std.constant35:0:0 */, meta[relay.Constant][312] /* ty=Tensor[(256), float32] span=std.constant35_dequant.scale__205:0:0 */, meta[relay.Constant][313] /* ty=Tensor[(256), int32] span=std.constant35_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(256, 160, 1, 1), float32] span=std.constant35_dequant:0:0 */;
  %688 = qnn.dequantize(meta[relay.Constant][314] /* ty=Tensor[(256), int32] span=std.constant79_dequant.std.constant79:0:0 */, meta[relay.Constant][315] /* ty=Tensor[(256), float32] span=std.constant79_dequant.scale__109:0:0 */, meta[relay.Constant][316] /* ty=Tensor[(256), int32] span=std.constant79_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(256), float32] span=std.constant79_dequant:0:0 */;
  %689 = expand_dims(%688, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %690 = nn.conv2d(%667, %687, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 65, 65), float32] span=tfl.conv_2d35_prequant:0:0 */;
  %691 = expand_dims(%689, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %692 = add(%690, %691) /* ty=Tensor[(1, 256, 65, 65), float32] */;
  %693 = nn.relu(%692) /* ty=Tensor[(1, 256, 65, 65), float32] span=Relu__92:0:0 */;
  %694 = qnn.quantize(%686, 0.0125014f /* ty=float32 span=tfl.conv_2d35_quantize.scale__1149:0:0 */, -128 /* ty=int32 span=ResizeBilinear_requantized:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 256, 65, 65), int8] span=ResizeBilinear_requantized:0:0 */;
  %695 = qnn.quantize(%693, 0.0125014f /* ty=float32 span=tfl.conv_2d35_quantize.scale__1149:0:0 */, -128 /* ty=int32 span=tfl.conv_2d35_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 256, 65, 65), int8] span=tfl.conv_2d35_quantize:0:0 */;
  %696 = (%694, %695) /* ty=(Tensor[(1, 256, 65, 65), int8], Tensor[(1, 256, 65, 65), int8]) span=concat_prequant:0:0 */;
  %697 = concatenate(%696, axis=1) /* ty=Tensor[(1, 512, 65, 65), int8] span=concat_prequant:0:0 */;
  %698 = qnn.dequantize(%697, 0.0125014f /* ty=float32 span=tfl.conv_2d35_quantize.scale__1149:0:0 */, -128 /* ty=int32 span=tfl.conv_2d36_prequant__1182_DequantizeLinear__1404:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 512, 65, 65), float32] span=tfl.conv_2d36_prequant__1182_DequantizeLinear__1404:0:0 */;
  %699 = qnn.dequantize(meta[relay.Constant][317] /* ty=Tensor[(256, 512, 1, 1), int8] span=std.constant36_dequant.std.constant36:0:0 */, meta[relay.Constant][318] /* ty=Tensor[(256), float32] span=std.constant36_dequant.scale__203:0:0 */, meta[relay.Constant][319] /* ty=Tensor[(256), int32] span=std.constant36_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(256, 512, 1, 1), float32] span=std.constant36_dequant:0:0 */;
  %700 = qnn.dequantize(meta[relay.Constant][320] /* ty=Tensor[(256), int32] span=std.constant80_dequant.std.constant80:0:0 */, meta[relay.Constant][321] /* ty=Tensor[(256), float32] span=std.constant80_dequant.scale__105:0:0 */, meta[relay.Constant][322] /* ty=Tensor[(256), int32] span=std.constant80_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(256), float32] span=std.constant80_dequant:0:0 */;
  %701 = expand_dims(%700, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %702 = nn.conv2d(%698, %699, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 65, 65), float32] span=tfl.conv_2d36_prequant:0:0 */;
  %703 = expand_dims(%701, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %704 = add(%702, %703) /* ty=Tensor[(1, 256, 65, 65), float32] */;
  %705 = nn.relu(%704) /* ty=Tensor[(1, 256, 65, 65), float32] span=Relu__94:0:0 */;
  %706 = qnn.quantize(%705, 0.0143902f /* ty=float32 span=tfl.conv_2d36_quantize.scale__1187:0:0 */, -128 /* ty=int32 span=tfl.conv_2d36_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 256, 65, 65), int8] span=tfl.conv_2d36_quantize:0:0 */;
  %707 = qnn.dequantize(%706, 0.0143902f /* ty=float32 span=tfl.conv_2d36_quantize.scale__1187:0:0 */, -128 /* ty=int32 span=tfl.conv_2d37_prequant__1189_DequantizeLinear__1457:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 256, 65, 65), float32] span=tfl.conv_2d37_prequant__1189_DequantizeLinear__1457:0:0 */;
  %708 = qnn.dequantize(meta[relay.Constant][323] /* ty=Tensor[(21, 256, 1, 1), int8] span=logits/semantic/Conv2D_dequant.logits/semantic/Conv2D:0:0 */, meta[relay.Constant][324] /* ty=Tensor[(21), float32] span=logits/semantic/Conv2D_dequant.scale__268:0:0 */, meta[relay.Constant][325] /* ty=Tensor[(21), int32] span=logits/semantic/Conv2D_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(21, 256, 1, 1), float32] span=logits/semantic/Conv2D_dequant:0:0 */;
  %709 = qnn.dequantize(meta[relay.Constant][326] /* ty=Tensor[(21), int32] span=std.constant81_dequant.std.constant81:0:0 */, meta[relay.Constant][327] /* ty=Tensor[(21), float32] span=std.constant81_dequant.scale__103:0:0 */, meta[relay.Constant][328] /* ty=Tensor[(21), int32] span=std.constant81_dequant:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(21), float32] span=std.constant81_dequant:0:0 */;
  %710 = expand_dims(%709, axis=1, num_newaxis=2) /* ty=Tensor[(21, 1, 1), float32] */;
  %711 = nn.conv2d(%707, %708, padding=[0, 0, 0, 0], channels=21, kernel_size=[1, 1]) /* ty=Tensor[(1, 21, 65, 65), float32] span=tfl.conv_2d37_prequant:0:0 */;
  %712 = expand_dims(%710, axis=0) /* ty=Tensor[(1, 21, 1, 1), float32] */;
  %713 = add(%711, %712) /* ty=Tensor[(1, 21, 65, 65), float32] */;
  %714 = qnn.quantize(%713, 0.103365f /* ty=float32 span=tfl.conv_2d37_quantize.scale__1194:0:0 */, -100 /* ty=int32 span=tfl.conv_2d37_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 21, 65, 65), int8] span=tfl.conv_2d37_quantize:0:0 */;
  %715 = qnn.dequantize(%714, 0.103365f /* ty=float32 span=tfl.conv_2d37_quantize.scale__1194:0:0 */, -100 /* ty=int32 span=Transpose__1197_DequantizeLinear__1448:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 21, 65, 65), float32] span=Transpose__1197_DequantizeLinear__1448:0:0 */;
  %716 = image.resize2d(%715, size=[65, 65], roi=[0f, 0f, 0f, 0f], coordinate_transformation_mode="align_corners", rounding_method="round_prefer_ceil", cubic_alpha=-0.75f) /* ty=Tensor[(1, 21, 65, 65), float32] span=Resize__1199:0:0 */;
  %717 = qnn.quantize(%716, 0.103365f /* ty=float32 span=tfl.conv_2d37_quantize.scale__1194:0:0 */, -100 /* ty=int32 span=ResizeBilinear_1_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 21, 65, 65), int8] span=ResizeBilinear_1_quantize:0:0 */;
  %718 = qnn.dequantize(%717, 0.103365f /* ty=float32 span=tfl.conv_2d37_quantize.scale__1194:0:0 */, -100 /* ty=int32 span=Transpose__1205_DequantizeLinear__1437:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 21, 65, 65), float32] span=Transpose__1205_DequantizeLinear__1437:0:0 */;
  %719 = image.resize2d(%718, size=[513, 513], roi=[0f, 0f, 0f, 0f], coordinate_transformation_mode="align_corners", rounding_method="round_prefer_ceil", cubic_alpha=-0.75f) /* ty=Tensor[(1, 21, 513, 513), float32] span=Resize__1207:0:0 */;
  %720 = qnn.quantize(%719, 0.103365f /* ty=float32 span=tfl.conv_2d37_quantize.scale__1194:0:0 */, -100 /* ty=int32 span=ResizeBilinear_2_int8_quantize:0:0 */, out_dtype="int8", axis=1) /* ty=Tensor[(1, 21, 513, 513), int8] span=ResizeBilinear_2_int8_quantize:0:0 */;
  %721 = transpose(%720, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 513, 513, 21), int8] span=ResizeBilinear_2_int8_prequant:0:0 */;
  qnn.dequantize(%721, 0.103365f /* ty=float32 span=tfl.conv_2d37_quantize.scale__1194:0:0 */, -100 /* ty=int32 span=ResizeBilinear_2_int8_prequant_DequantizeLinear__1331:0:0 */, out_dtype="float32", axis=1) /* ty=Tensor[(1, 513, 513, 21), float32] span=ResizeBilinear_2_int8_prequant_DequantizeLinear__1331:0:0 */
}

